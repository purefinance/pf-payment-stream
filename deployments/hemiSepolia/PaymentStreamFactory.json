{
  "address": "0x5B458d71a353384087CE1c48dA405D9cab14d155",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feedRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenDenomination",
          "type": "address"
        }
      ],
      "name": "CustomFeedMappingUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeedRegistry",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeedRegistry",
          "type": "address"
        }
      ],
      "name": "FeedRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTolerance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTolerance",
          "type": "uint256"
        }
      ],
      "name": "StalenessToleranceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stream",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdAmount",
          "type": "uint256"
        }
      ],
      "name": "StreamCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fundingAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "createStream",
      "outputs": [
        {
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "customFeedMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feedRegistry",
      "outputs": [
        {
          "internalType": "contract FeedRegistryInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getStream",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStreamsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_a",
          "type": "address"
        }
      ],
      "name": "ours",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stalenessTolerance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_denomination",
          "type": "address"
        }
      ],
      "name": "updateCustomFeedMapping",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "updateFeedRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTolerance",
          "type": "uint256"
        }
      ],
      "name": "updateStalenessTolerance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "usdToTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa77a9cb599a08fecbf06ff1783091d22df5058fd7902c01a3c5511dda2a67be4",
  "receipt": {
    "to": null,
    "from": "0x169e2FfC1c6b229b04E65A431434bF0e8eD9563d",
    "contractAddress": "0x5B458d71a353384087CE1c48dA405D9cab14d155",
    "transactionIndex": 1,
    "gasUsed": "3069553",
    "logsBloom": "0x
    "blockHash": "0xc0c0d71a3c956474d7ef1a89d896b9af29218748331a34a5b8eb03404344ca1f",
    "transactionHash": "0xa77a9cb599a08fecbf06ff1783091d22df5058fd7902c01a3c5511dda2a67be4",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 310296,
        "transactionHash": "0xa77a9cb599a08fecbf06ff1783091d22df5058fd7902c01a3c5511dda2a67be4",
        "address": "0x5B458d71a353384087CE1c48dA405D9cab14d155",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000169e2ffc1c6b229b04e65a431434bf0e8ed9563d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc0c0d71a3c956474d7ef1a89d896b9af29218748331a34a5b8eb03404344ca1f"
      }
    ],
    "blockNumber": 310296,
    "cumulativeGasUsed": "3122042",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xeA437b70f29Bd7FD4Bb34e98DD5Be06c1aCAcCF7"
  ],
  "numDeployments": 1,
  "solcInputHash": "20540cc51b65df89ece15d1bfd2ba1e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feedRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenDenomination\",\"type\":\"address\"}],\"name\":\"CustomFeedMappingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeedRegistry\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeedRegistry\",\"type\":\"address\"}],\"name\":\"FeedRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTolerance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTolerance\",\"type\":\"uint256\"}],\"name\":\"StalenessToleranceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stream\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"StreamCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customFeedMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feedRegistry\",\"outputs\":[{\"internalType\":\"contract FeedRegistryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStreamsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"ours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stalenessTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_denomination\",\"type\":\"address\"}],\"name\":\"updateCustomFeedMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateFeedRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTolerance\",\"type\":\"uint256\"}],\"name\":\"updateStalenessTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"usdToTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createStream(address,uint256,address,address,uint256)\":{\"details\":\"Payer (_msgSender()) is set as admin of \\\"pausableRole\\\", so he can grant and revoke the \\\"pausable\\\" role later on\",\"params\":{\"_endTime\":\"timestamp that sets drip distribution end\",\"_fundingAddress\":\"address used to withdraw the drip\",\"_payee\":\"address that receives the payment stream\",\"_token\":\"address of the ERC20 token that payee receives as payment\",\"_usdAmount\":\"uint256 total amount in USD (scaled to 18 decimals) to be distributed until endTime\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCustomFeedMapping(address,address)\":{\"params\":{\"_denomination\":\"the denomination address that the feed registry uses for _token\",\"_token\":\"address of the ERC20 token\"}},\"updateFeedRegistry(address)\":{\"details\":\"Only contract owner can change feedRegistry\",\"params\":{\"_newAddress\":\"address of new Chainlink FeedRegistry instance\"}},\"updateStalenessTolerance(uint256)\":{\"params\":{\"_newTolerance\":\"new tolerance range in seconds\"}},\"usdToTokenAmount(address,uint256)\":{\"params\":{\"_amount\":\"amount in USD (scaled to 18 decimals)\",\"_token\":\"address of target token\"},\"returns\":{\"lastPrice\":\"target token amount\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createStream(address,uint256,address,address,uint256)\":{\"notice\":\"Creates a new payment stream\"},\"getStream(uint256)\":{\"notice\":\"Returns address of the stream located at given id\"},\"getStreamsCount()\":{\"notice\":\"Returns no. of streams stored in contract\"},\"ours(address)\":{\"notice\":\"Checks if a address belongs to this contract' streams\"},\"updateCustomFeedMapping(address,address)\":{\"notice\":\"Defines a custom mapping for token denominations in the Feed Registry\"},\"updateFeedRegistry(address)\":{\"notice\":\"Updates Chainlink FeedRegistry contract address\"},\"updateStalenessTolerance(uint256)\":{\"notice\":\"Defines a staleness tolerance for ChainLink price quote It can be set to 0 to recover the drip\"},\"usdToTokenAmount(address,uint256)\":{\"notice\":\"Converts given amount in usd to target token amount using oracle\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PaymentStreamFactory.sol\":\"PaymentStreamFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Denominations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Denominations {\\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\\n\\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\\n  address public constant USD = address(840);\\n  address public constant GBP = address(826);\\n  address public constant EUR = address(978);\\n  address public constant JPY = address(392);\\n  address public constant KRW = address(410);\\n  address public constant CNY = address(156);\\n  address public constant AUD = address(36);\\n  address public constant CAD = address(124);\\n  address public constant CHF = address(756);\\n  address public constant ARS = address(32);\\n  address public constant PHP = address(608);\\n  address public constant NZD = address(554);\\n  address public constant SGD = address(702);\\n  address public constant NGN = address(566);\\n  address public constant ZAR = address(710);\\n  address public constant RUB = address(643);\\n  address public constant INR = address(356);\\n  address public constant BRL = address(986);\\n}\\n\",\"keccak256\":\"0xee406990d671c95993762c3ee15c77987ee35c3682357c419ff73747a728fc4d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./AggregatorV2V3Interface.sol\\\";\\n\\ninterface FeedRegistryInterface {\\n  struct Phase {\\n    uint16 phaseId;\\n    uint80 startingAggregatorRoundId;\\n    uint80 endingAggregatorRoundId;\\n  }\\n\\n  event FeedProposed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed proposedAggregator,\\n    address currentAggregator,\\n    address sender\\n  );\\n  event FeedConfirmed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed latestAggregator,\\n    address previousAggregator,\\n    uint16 nextPhaseId,\\n    address sender\\n  );\\n\\n  // V3 AggregatorV3Interface\\n\\n  function decimals(address base, address quote) external view returns (uint8);\\n\\n  function description(address base, address quote) external view returns (string memory);\\n\\n  function version(address base, address quote) external view returns (uint256);\\n\\n  function latestRoundData(\\n    address base,\\n    address quote\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function getRoundData(\\n    address base,\\n    address quote,\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  // V2 AggregatorInterface\\n\\n  function latestAnswer(address base, address quote) external view returns (int256 answer);\\n\\n  function latestTimestamp(address base, address quote) external view returns (uint256 timestamp);\\n\\n  function latestRound(address base, address quote) external view returns (uint256 roundId);\\n\\n  function getAnswer(address base, address quote, uint256 roundId) external view returns (int256 answer);\\n\\n  function getTimestamp(address base, address quote, uint256 roundId) external view returns (uint256 timestamp);\\n\\n  // Registry getters\\n\\n  function getFeed(address base, address quote) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function getPhaseFeed(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function isFeedEnabled(address aggregator) external view returns (bool);\\n\\n  function getPhase(address base, address quote, uint16 phaseId) external view returns (Phase memory phase);\\n\\n  // Round helpers\\n\\n  function getRoundFeed(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function getPhaseRange(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (uint80 startingRoundId, uint80 endingRoundId);\\n\\n  function getPreviousRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (uint80 previousRoundId);\\n\\n  function getNextRoundId(address base, address quote, uint80 roundId) external view returns (uint80 nextRoundId);\\n\\n  // Feed management\\n\\n  function proposeFeed(address base, address quote, address aggregator) external;\\n\\n  function confirmFeed(address base, address quote, address aggregator) external;\\n\\n  // Proposed aggregator\\n\\n  function getProposedFeed(\\n    address base,\\n    address quote\\n  ) external view returns (AggregatorV2V3Interface proposedAggregator);\\n\\n  function proposedGetRoundData(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (uint80 id, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function proposedLatestRoundData(\\n    address base,\\n    address quote\\n  ) external view returns (uint80 id, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  // Phases\\n  function getCurrentPhaseId(address base, address quote) external view returns (uint16 currentPhaseId);\\n}\\n\",\"keccak256\":\"0x022ca4bb2b66c0531d3552ad13fb29620cd7efa470ef0271fd5128ffce5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/PaymentStream.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {IPaymentStream} from \\\"./interfaces/IPaymentStream.sol\\\";\\nimport {IPaymentStreamFactoryMetadata} from \\\"./interfaces/IPaymentStreamFactoryMetadata.sol\\\";\\n\\n// solhint-disable custom-errors, immutable-vars-naming\\ncontract PaymentStream is AccessControl, IPaymentStream {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable var-name-mixedcase\\n    string public VERSION;\\n    // solhint-enable var-name-mixedcase\\n    string public constant NAME = \\\"PaymentStream\\\";\\n\\n    address public immutable payer;\\n    address public immutable token;\\n\\n    address public payee;\\n    address public fundingAddress;\\n\\n    uint256 public usdAmount;\\n    uint256 public startTime;\\n    uint256 public secs;\\n    uint256 public usdPerSec;\\n    uint256 public claimed;\\n\\n    bool public paused;\\n\\n    IPaymentStreamFactoryMetadata public immutable factory;\\n\\n    bytes32 private constant ADMIN_ROLE = keccak256(abi.encodePacked(\\\"admin\\\"));\\n    bytes32 private constant PAUSABLE_ROLE = keccak256(abi.encodePacked(\\\"pausable\\\"));\\n\\n    modifier onlyPayer() {\\n        require(_msgSender() == payer, \\\"not-stream-owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyPayerOrDelegated() {\\n        require(_msgSender() == payer || hasRole(PAUSABLE_ROLE, _msgSender()), \\\"not-stream-owner-or-delegated\\\");\\n        _;\\n    }\\n\\n    modifier onlyPayee() {\\n        require(_msgSender() == payee, \\\"not-payee\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Creates a new payment stream\\n     * @dev Payer is set as admin of \\\"PAUSABLE_ROLE\\\", so he can grant and revoke the \\\"pausable\\\" role later on\\n     * @param _payer Owner of the stream\\n     * @param _payee address that receives the payment stream\\n     * @param _usdAmount uint256 total amount in USD (scaled to 18 decimals) to be distributed until endTime\\n     * @param _token address of the ERC20 token that payee receives as payment\\n     * @param _fundingAddress address used to withdraw the drip\\n     * @param _endTime timestamp that sets drip distribution end\\n     */\\n    constructor(\\n        address _payer,\\n        address _payee,\\n        uint256 _usdAmount,\\n        address _token,\\n        address _fundingAddress,\\n        uint256 _endTime\\n    ) {\\n        factory = IPaymentStreamFactoryMetadata(_msgSender());\\n\\n        VERSION = factory.VERSION();\\n\\n        require(_endTime > block.timestamp, \\\"invalid-end-time\\\");\\n        require(_payee != _fundingAddress, \\\"payee-is-funding-address\\\");\\n        require(_payee != address(0) && _fundingAddress != address(0), \\\"payee-or-funding-address-is-0\\\");\\n\\n        require(_usdAmount > 0, \\\"usd-amount-is-0\\\");\\n\\n        payee = _payee;\\n        usdAmount = _usdAmount;\\n        token = _token;\\n        fundingAddress = _fundingAddress;\\n        payer = _payer;\\n        startTime = block.timestamp;\\n        secs = _endTime - block.timestamp;\\n        usdPerSec = _usdAmount / secs;\\n\\n        require(usdPerSec != 0, \\\"usd-per-sec-is-0\\\");\\n\\n        _setupRole(ADMIN_ROLE, _payer);\\n        _setRoleAdmin(PAUSABLE_ROLE, ADMIN_ROLE);\\n    }\\n\\n    /**\\n     * @notice Delegates pausable capability to new delegate\\n     * @dev Only RoleAdmin (Payer) can delegate this capability, tx will revert otherwise\\n     * @param _delegate address that receives the \\\"PAUSABLE_ROLE\\\"\\n     */\\n    function delegatePausable(address _delegate) external override {\\n        require(_delegate != address(0), \\\"invalid-delegate\\\");\\n\\n        grantRole(PAUSABLE_ROLE, _delegate);\\n    }\\n\\n    /**\\n     * @notice Revokes pausable capability of a delegate\\n     * @dev Only RoleAdmin (Payer) can revoke this capability, tx will revert otherwise\\n     * @param _delegate address that has its \\\"PAUSABLE_ROLE\\\" revoked\\n     */\\n    function revokePausable(address _delegate) external override {\\n        revokeRole(PAUSABLE_ROLE, _delegate);\\n    }\\n\\n    /**\\n     * @notice Pauses a stream if caller is either the payer or a delegate of PAUSABLE_ROLE\\n     */\\n    function pauseStream() external override onlyPayerOrDelegated {\\n        paused = true;\\n        emit StreamPaused();\\n    }\\n\\n    /**\\n     * @notice Unpauses a stream if caller is either the payer or a delegate of PAUSABLE_ROLE\\n     */\\n    function unpauseStream() external override onlyPayerOrDelegated {\\n        paused = false;\\n        emit StreamUnpaused();\\n    }\\n\\n    /**\\n     * @notice If caller is the payer of the stream it sets a new address as receiver of the stream\\n     * @param _newPayee address of new payee\\n     */\\n    function updatePayee(address _newPayee) external override onlyPayer {\\n        require(_newPayee != address(0), \\\"invalid-new-payee\\\");\\n        require(_newPayee != payee, \\\"same-new-payee\\\");\\n        require(_newPayee != fundingAddress, \\\"new-payee-is-funding-address\\\");\\n\\n        _claim();\\n\\n        emit PayeeUpdated(payee, _newPayee);\\n        payee = _newPayee;\\n    }\\n\\n    /**\\n     * @notice If caller is the payer of the stream it sets a new address used to withdraw the drip\\n     * @param _newFundingAddress new address used to withdraw the drip\\n     */\\n    function updateFundingAddress(address _newFundingAddress) external override onlyPayer {\\n        require(_newFundingAddress != address(0), \\\"invalid-new-funding-address\\\");\\n        require(_newFundingAddress != fundingAddress, \\\"same-new-funding-address\\\");\\n        require(_newFundingAddress != payee, \\\"new-funding-address-is-payee\\\");\\n\\n        emit FundingAddressUpdated(fundingAddress, _newFundingAddress);\\n\\n        fundingAddress = _newFundingAddress;\\n    }\\n\\n    /**\\n     * @notice If caller is the payer it increases or decreases a stream funding rate\\n     * @dev Any unclaimed drip amount remaining will be claimed on behalf of payee\\n     * @param _usdAmount uint256 total amount in USD (scaled to 18 decimals) to be distributed until endTime\\n     * @param _endTime timestamp that sets drip distribution end\\n     */\\n    function updateFundingRate(uint256 _usdAmount, uint256 _endTime) external override onlyPayer {\\n        require(_endTime > block.timestamp, \\\"invalid-end-time\\\");\\n\\n        _claim();\\n\\n        usdAmount = _usdAmount;\\n        startTime = block.timestamp;\\n        secs = _endTime - block.timestamp;\\n        usdPerSec = _usdAmount / secs;\\n        claimed = 0;\\n\\n        emit StreamUpdated(_usdAmount, _endTime);\\n    }\\n\\n    /**\\n     * @notice If caller is the payee of the stream it receives the accrued drip amount\\n     */\\n    function claim() external override onlyPayee {\\n        require(!paused, \\\"stream-is-paused\\\");\\n        _claim();\\n    }\\n\\n    function claimable() external view override returns (uint256) {\\n        return _claimable();\\n    }\\n\\n    /**\\n     * @notice Helper function, gets the accrued drip of given stream converted into target token amount\\n     * @return uint256 amount in target token\\n     */\\n    function claimableToken() external view override returns (uint256) {\\n        return factory.usdToTokenAmount(token, _claimable());\\n    }\\n\\n    function _claim() internal {\\n        uint256 _accumulated = _claimable();\\n\\n        if (_accumulated == 0) return;\\n\\n        uint256 _amount = factory.usdToTokenAmount(token, _accumulated);\\n\\n        claimed += _accumulated;\\n\\n        IERC20(token).safeTransferFrom(fundingAddress, payee, _amount);\\n\\n        emit Claimed(_accumulated, _amount, token);\\n    }\\n\\n    /**\\n     * @notice gets the accrued drip of given stream in USD\\n     * @return uint256 USD amount (scaled to 18 decimals)\\n     */\\n    function _claimable() internal view returns (uint256) {\\n        uint256 _elapsed = block.timestamp - startTime;\\n\\n        if (_elapsed > secs) {\\n            return usdAmount - claimed; // no more drips to avoid floating point dust\\n        }\\n\\n        return (usdPerSec * _elapsed) - claimed;\\n    }\\n}\\n\",\"keccak256\":\"0x1dd7210e7627a8fd995b288442b82ac17b2ead86b2193264f6f36b9b6a572567\",\"license\":\"MIT\"},\"contracts/PaymentStreamFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {AggregatorV2V3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\nimport {FeedRegistryInterface} from \\\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\\\";\\nimport {Denominations} from \\\"@chainlink/contracts/src/v0.8/Denominations.sol\\\";\\nimport {IPaymentStreamFactory} from \\\"./interfaces/IPaymentStreamFactory.sol\\\";\\nimport {PaymentStream} from \\\"./PaymentStream.sol\\\";\\n\\n// solhint-disable custom-errors\\ncontract PaymentStreamFactory is IPaymentStreamFactory, Ownable {\\n    string public constant VERSION = \\\"1.0.2\\\";\\n    string public constant NAME = \\\"PaymentStreamFactory\\\";\\n\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    address[] private allStreams;\\n    mapping(address => bool) private isOurs;\\n\\n    // Chainlink Feed Registry: https://docs.chain.link/docs/feed-registry/\\n    // Aggregates all supported price feeds in one handy factory contract\\n    // Automatically supported TOKEN/USD and TOKEN/ETH pairs: https://docs.chain.link/docs/ethereum-addresses/\\n    FeedRegistryInterface public feedRegistry;\\n\\n    // Some tokens like ETH or BTC have special addresses in the feed registry\\n    // token address => token denomination in Feed Registry\\n    mapping(address => address) public customFeedMapping;\\n\\n    // Staleness tolerance to reject quote from ChainLink\\n    uint256 public stalenessTolerance = 24 hours;\\n\\n    constructor(address _feedRegistry) {\\n        feedRegistry = FeedRegistryInterface(_feedRegistry);\\n\\n        customFeedMapping[WETH] = Denominations.ETH;\\n    }\\n\\n    /**\\n     * @notice Creates a new payment stream\\n     * @dev Payer (_msgSender()) is set as admin of \\\"pausableRole\\\", so he can grant and revoke the \\\"pausable\\\" role later on\\n     * @param _payee address that receives the payment stream\\n     * @param _usdAmount uint256 total amount in USD (scaled to 18 decimals) to be distributed until endTime\\n     * @param _token address of the ERC20 token that payee receives as payment\\n     * @param _fundingAddress address used to withdraw the drip\\n     * @param _endTime timestamp that sets drip distribution end\\n     */\\n    function createStream(\\n        address _payee,\\n        uint256 _usdAmount,\\n        address _token,\\n        address _fundingAddress,\\n        uint256 _endTime\\n    ) external returns (address streamAddress) {\\n        // Prevents the caller to create a Stream with an unsupported token\\n        // In case a USD/TOKEN or ETH/TOKEN Pair doesn't exist\\n        // This will revert with \\\"Feed not found\\\"\\n        usdToTokenAmount(_token, _usdAmount);\\n\\n        streamAddress = address(new PaymentStream(_msgSender(), _payee, _usdAmount, _token, _fundingAddress, _endTime));\\n\\n        allStreams.push(streamAddress);\\n        isOurs[streamAddress] = true;\\n\\n        emit StreamCreated(allStreams.length - 1, streamAddress, _msgSender(), _payee, _usdAmount);\\n    }\\n\\n    /**\\n     * @notice Updates Chainlink FeedRegistry contract address\\n     * @dev Only contract owner can change feedRegistry\\n     * @param _newAddress address of new Chainlink FeedRegistry instance\\n     */\\n    function updateFeedRegistry(address _newAddress) external override onlyOwner {\\n        require(_newAddress != address(0), \\\"invalid-feed-registry-address\\\");\\n        require(_newAddress != address(feedRegistry), \\\"same-feed-registry-address\\\");\\n\\n        emit FeedRegistryUpdated(address(feedRegistry), _newAddress);\\n        feedRegistry = FeedRegistryInterface(_newAddress);\\n    }\\n\\n    /**\\n     * @notice Defines a custom mapping for token denominations in the Feed Registry\\n     * @param _token address of the ERC20 token\\n     * @param _denomination the denomination address that the feed registry uses for _token\\n     */\\n    function updateCustomFeedMapping(address _token, address _denomination) external onlyOwner {\\n        require(_denomination != address(0), \\\"invalid-custom-feed-map\\\");\\n        require(_denomination != customFeedMapping[_token], \\\"same-custom-feed-map\\\");\\n\\n        customFeedMapping[_token] = _denomination;\\n        emit CustomFeedMappingUpdated(_token, _denomination);\\n    }\\n\\n    /**\\n     * @notice Defines a staleness tolerance for ChainLink price quote\\n     * It can be set to 0 to recover the drip\\n     * @param _newTolerance new tolerance range in seconds\\n     */\\n    function updateStalenessTolerance(uint256 _newTolerance) external onlyOwner {\\n        emit StalenessToleranceUpdated(stalenessTolerance, _newTolerance);\\n        stalenessTolerance = _newTolerance;\\n    }\\n\\n    /**\\n     * @notice Converts given amount in usd to target token amount using oracle\\n     * @param _token address of target token\\n     * @param _amount amount in USD (scaled to 18 decimals)\\n     * @return lastPrice target token amount\\n     */\\n    function usdToTokenAmount(address _token, uint256 _amount) public view override returns (uint256 lastPrice) {\\n        // tries a direct _token -> USD pair first\\n        try feedRegistry.getFeed(_tokenDenomination(_token), Denominations.USD) returns (AggregatorV2V3Interface) {\\n            uint256 _quote = _getQuote(_token, Denominations.USD);\\n            lastPrice = ((_amount * 1e18) / _quote) / 10 ** (18 - IERC20Metadata(_token).decimals());\\n        } catch {\\n            // If getFeed reverts, uses token/ETH/usd route\\n            // If a feed doesn't exist for _token/ETH, it will revert with \\\"Feed not found\\\"\\n            uint256 _ethQuote = _getQuote(_token, Denominations.ETH);\\n            uint256 _ethUsdQuote = _getQuote(Denominations.ETH, Denominations.USD);\\n            uint256 _amountInETH = (_amount * 1e18) / _ethUsdQuote;\\n            lastPrice = ((_amountInETH * 1e18) / _ethQuote) / 10 ** (18 - IERC20Metadata(_token).decimals());\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if a address belongs to this contract' streams\\n     */\\n    function ours(address _a) external view override returns (bool) {\\n        return isOurs[_a];\\n    }\\n\\n    /**\\n     * @notice Returns no. of streams stored in contract\\n     */\\n    function getStreamsCount() external view override returns (uint256) {\\n        return allStreams.length;\\n    }\\n\\n    /**\\n     * @notice Returns address of the stream located at given id\\n     */\\n    function getStream(uint256 _idx) external view override returns (address) {\\n        return allStreams[_idx];\\n    }\\n\\n    function _getQuote(address _base, address _quote) internal view returns (uint256) {\\n        (, int256 _price, , uint256 _updatedAt, ) = feedRegistry.latestRoundData(_tokenDenomination(_base), _quote);\\n\\n        // If stalenessTolerance is set ( > 0)\\n        // Reject quote from the oracle if it's outside time range\\n        require((stalenessTolerance == 0 || (block.timestamp - _updatedAt <= stalenessTolerance)), \\\"stale-oracle\\\");\\n\\n        // USD decimals is 8 in ChainLink, scales it up to 18 decimals\\n        _price = (_quote == Denominations.USD) ? _price * 1e10 : _price;\\n        return uint256(_price);\\n    }\\n\\n    function _tokenDenomination(address _token) internal view returns (address) {\\n        return (customFeedMapping[_token] == address(0)) ? _token : customFeedMapping[_token];\\n    }\\n}\\n\",\"keccak256\":\"0x3a5c094532ace51a92583885ec638550a9133782e37e5700962474570737ae31\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentStream.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IPaymentStream {\\n    event Claimed(uint256 usdAmount, uint256 tokenAmount, address indexed token);\\n    event StreamPaused();\\n    event StreamUnpaused();\\n    event StreamUpdated(uint256 usdAmount, uint256 endTime);\\n\\n    event FundingAddressUpdated(address indexed previousFundingAddress, address indexed newFundingAddress);\\n    event PayeeUpdated(address indexed previousPayee, address indexed newPayee);\\n\\n    function claim() external;\\n\\n    function pauseStream() external;\\n\\n    function unpauseStream() external;\\n\\n    function delegatePausable(address delegate) external;\\n\\n    function revokePausable(address delegate) external;\\n\\n    function updateFundingRate(uint256 usdAmount, uint256 endTime) external;\\n\\n    function updateFundingAddress(address newFundingAddress) external;\\n\\n    function updatePayee(address newPayee) external;\\n\\n    function claimableToken() external view returns (uint256);\\n\\n    function claimable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4d42261fcc4de8e804e050907af2f71c791ec2ed7999eb0306b8172adfbe699c\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentStreamFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IPaymentStreamFactory {\\n    event StreamCreated(\\n        uint256 id,\\n        address indexed stream,\\n        address indexed payer,\\n        address indexed payee,\\n        uint256 usdAmount\\n    );\\n\\n    event CustomFeedMappingUpdated(address indexed token, address indexed tokenDenomination);\\n\\n    event FeedRegistryUpdated(address indexed previousFeedRegistry, address indexed newFeedRegistry);\\n\\n    event StalenessToleranceUpdated(uint256 oldTolerance, uint256 newTolerance);\\n\\n    function updateFeedRegistry(address newAddress) external;\\n\\n    function usdToTokenAmount(address _token, uint256 _amount) external view returns (uint256);\\n\\n    function ours(address _a) external view returns (bool);\\n\\n    function getStreamsCount() external view returns (uint256);\\n\\n    function getStream(uint256 _idx) external view returns (address);\\n}\\n\",\"keccak256\":\"0xa99b2519ad4ad7f8ce9650d092f12087e80d5f404041fea069d9814ad28d3c02\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentStreamFactoryMetadata.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport {IPaymentStreamFactory} from \\\"./IPaymentStreamFactory.sol\\\";\\n\\ninterface IPaymentStreamFactoryMetadata is IPaymentStreamFactory {\\n    // solhint-disable func-name-mixedcase\\n    function NAME() external view returns (string memory);\\n\\n    function VERSION() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xefaab2e7a53c1cd1c15b91ce4feeee72091964800ba0a2cf906b5f3a6c6ebd3c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526201518060055534801561001757600080fd5b5060405161366c38038061366c8339810160408190526100369161010c565b61003f336100bc565b600380546001600160a01b039092166001600160a01b031992831617905573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc260005260046020527e137c28eabea4eda5601e544e6551e6761ee561d32c4142c29e0f892835a361805490911673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee17905561013c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561011e57600080fd5b81516001600160a01b038116811461013557600080fd5b9392505050565b6135218061014b6000396000f3fe60806040523480156200001157600080fd5b5060043610620001155760003560e01c8063a3f4df7e11620000a3578063e335e79a116200006e578063e335e79a14620002ba578063f2fde38b14620002c3578063f411d38914620002da578063ffa1ad7414620002e457600080fd5b8063a3f4df7e1462000205578063b01cdf3d1462000251578063b02737ff1462000268578063b2211d5c146200029457600080fd5b806381cc3ba411620000e457806381cc3ba41462000188578063894e9a0d14620001c85780638da5cb5b14620001df57806390238c3914620001f157600080fd5b80632d3965bd146200011a5780635ccc57351462000133578063715018a61462000167578063748f682e1462000171575b600080fd5b620001316200012b36600462000d38565b62000321565b005b6200014a6200014436600462000d76565b6200045a565b6040516001600160a01b0390911681526020015b60405180910390f35b6200013162000599565b620001316200018236600462000dd8565b620005b1565b620001b76200019936600462000df2565b6001600160a01b031660009081526002602052604090205460ff1690565b60405190151581526020016200015e565b6200014a620001d936600462000dd8565b620005fc565b6000546001600160a01b03166200014a565b6003546200014a906001600160a01b031681565b620002426040518060400160405280601481526020017f5061796d656e7453747265616d466163746f727900000000000000000000000081525081565b6040516200015e919062000e19565b620001316200026236600462000df2565b6200062f565b6200014a6200027936600462000df2565b6004602052600090815260409020546001600160a01b031681565b620002ab620002a536600462000e71565b6200075a565b6040519081526020016200015e565b600154620002ab565b62000131620002d436600462000df2565b62000a20565b620002ab60055481565b620002426040518060400160405280600581526020017f312e302e3200000000000000000000000000000000000000000000000000000081525081565b6200032b62000ab6565b6001600160a01b038116620003875760405162461bcd60e51b815260206004820152601760248201527f696e76616c69642d637573746f6d2d666565642d6d617000000000000000000060448201526064015b60405180910390fd5b6001600160a01b0380831660009081526004602052604090205482821691161415620003f65760405162461bcd60e51b815260206004820152601460248201527f73616d652d637573746f6d2d666565642d6d617000000000000000000000000060448201526064016200037e565b6001600160a01b03828116600081815260046020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169486169485179055517f497fb4c9c745286ec067621e3f67117daa1960eb459aa41003d30394070dd2c49190a35050565b60006200046884866200075a565b503386868686866040516200047d9062000d14565b6001600160a01b039687168152948616602086015260408501939093529084166060840152909216608082015260a081019190915260c001604051809103906000f080158015620004d2573d6000803e3d6000fd5b506001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038481169182179092556000818152600260205260409020805460ff19168417905582549394509089169233927fb09edfcf805674d896a73bdea048a368e58a9ee54fe3e177237ba603ce7572239162000579919062000eb6565b60408051918252602082018b90520160405180910390a495945050505050565b620005a362000ab6565b620005af600062000b12565b565b620005bb62000ab6565b60055460408051918252602082018390527fa78b3a7f4155d0f667750fea220b1d92f8a334e9b52f1b0c60fb31d266387c04910160405180910390a1600555565b60006001828154811062000614576200061462000ed0565b6000918252602090912001546001600160a01b031692915050565b6200063962000ab6565b6001600160a01b038116620006915760405162461bcd60e51b815260206004820152601d60248201527f696e76616c69642d666565642d72656769737472792d6164647265737300000060448201526064016200037e565b6003546001600160a01b0382811691161415620006f15760405162461bcd60e51b815260206004820152601a60248201527f73616d652d666565642d72656769737472792d6164647265737300000000000060448201526064016200037e565b6003546040516001600160a01b038084169216907f6d1006252b3dd171af76c28c184327bfddc39f439a50e0ac7f418c660b8894b590600090a36003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546000906001600160a01b031663d2edb6dd620007798562000b6f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152610348602482015260440160206040518083038186803b158015620007d957600080fd5b505afa9250505080156200080c575060408051601f3d908101601f19168201909252620008099181019062000ee6565b60015b62000947576000620008338473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee62000bb7565b905060006200085973eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61034862000bb7565b90506000816200087286670de0b6b3a764000062000f06565b6200087e919062000f28565b9050856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620008ba57600080fd5b505afa158015620008cf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008f5919062000f4b565b6200090290601262000f70565b6200090f90600a62001093565b836200092483670de0b6b3a764000062000f06565b62000930919062000f28565b6200093c919062000f28565b935050505062000a1a565b6000620009578561034862000bb7565b9050846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200099357600080fd5b505afa158015620009a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009ce919062000f4b565b620009db90601262000f70565b620009e890600a62001093565b81620009fd86670de0b6b3a764000062000f06565b62000a09919062000f28565b62000a15919062000f28565b925050505b92915050565b62000a2a62000ab6565b6001600160a01b03811662000aa85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016200037e565b62000ab38162000b12565b50565b6000546001600160a01b03163314620005af5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200037e565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038181166000908152600460205260408120549091161562000bb3576001600160a01b038083166000908152600460205260409020541662000a1a565b5090565b600354600090819081906001600160a01b031663bcfd032d62000bda8762000b6f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039182166004820152908716602482015260440160a06040518083038186803b15801562000c3a57600080fd5b505afa15801562000c4f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c759190620010c4565b509350509250506005546000148062000c9b575060055462000c98824262000eb6565b11155b62000ce95760405162461bcd60e51b815260206004820152600c60248201527f7374616c652d6f7261636c65000000000000000000000000000000000000000060448201526064016200037e565b6001600160a01b0384166103481462000d03578162000a15565b62000a15826402540be40062001119565b61230a80620011e283390190565b6001600160a01b038116811462000ab357600080fd5b6000806040838503121562000d4c57600080fd5b823562000d598162000d22565b9150602083013562000d6b8162000d22565b809150509250929050565b600080600080600060a0868803121562000d8f57600080fd5b853562000d9c8162000d22565b945060208601359350604086013562000db58162000d22565b9250606086013562000dc78162000d22565b949793965091946080013592915050565b60006020828403121562000deb57600080fd5b5035919050565b60006020828403121562000e0557600080fd5b813562000e128162000d22565b9392505050565b600060208083528351808285015260005b8181101562000e485785810183015185820160400152820162000e2a565b8181111562000e5b576000604083870101525b50601f01601f1916929092016040019392505050565b6000806040838503121562000e8557600080fd5b823562000e928162000d22565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008282101562000ecb5762000ecb62000ea0565b500390565b634e487b7160e01b600052603260045260246000fd5b60006020828403121562000ef957600080fd5b815162000e128162000d22565b600081600019048311821515161562000f235762000f2362000ea0565b500290565b60008262000f4657634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121562000f5e57600080fd5b815160ff8116811462000e1257600080fd5b600060ff821660ff84168082101562000f8d5762000f8d62000ea0565b90039392505050565b600181815b8085111562000fd757816000190482111562000fbb5762000fbb62000ea0565b8085161562000fc957918102915b93841c939080029062000f9b565b509250929050565b60008262000ff05750600162000a1a565b8162000fff5750600062000a1a565b8160018114620010185760028114620010235762001043565b600191505062000a1a565b60ff84111562001037576200103762000ea0565b50506001821b62000a1a565b5060208310610133831016604e8410600b841016171562001068575081810a62000a1a565b62001074838362000f96565b80600019048211156200108b576200108b62000ea0565b029392505050565b600062000e1260ff84168362000fdf565b805169ffffffffffffffffffff81168114620010bf57600080fd5b919050565b600080600080600060a08688031215620010dd57600080fd5b620010e886620010a4565b94506020860151935060408601519250606086015191506200110d60808701620010a4565b90509295509295909350565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000841360008413858304851182821616156200115d576200115d62000ea0565b7f800000000000000000000000000000000000000000000000000000000000000060008712868205881281841616156200119b576200119b62000ea0565b60008712925087820587128484161615620011ba57620011ba62000ea0565b87850587128184161615620011d357620011d362000ea0565b50505092909302939250505056fe60e06040523480156200001157600080fd5b506040516200230a3803806200230a833981016040819052620000349162000546565b3360c0819052604080516001621794a360e21b03198152905163ffa1ad7491600480820192600092909190829003018186803b1580156200007457600080fd5b505afa15801562000089573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000b39190810190620005cb565b8051620000c99160019160209091019062000483565b50428111620001125760405162461bcd60e51b815260206004820152601060248201526f696e76616c69642d656e642d74696d6560801b60448201526064015b60405180910390fd5b816001600160a01b0316856001600160a01b03161415620001765760405162461bcd60e51b815260206004820152601860248201527f70617965652d69732d66756e64696e672d616464726573730000000000000000604482015260640162000109565b6001600160a01b038516158015906200019757506001600160a01b03821615155b620001e55760405162461bcd60e51b815260206004820152601d60248201527f70617965652d6f722d66756e64696e672d616464726573732d69732d30000000604482015260640162000109565b60008411620002295760405162461bcd60e51b815260206004820152600f60248201526e07573642d616d6f756e742d69732d3608c1b604482015260640162000109565b600280546001600160a01b038088166001600160a01b031992831617909255600486905584821660a0526003805485841692169190911790558616608052426005819055620002799082620006a7565b60068190556200028a9085620006cd565b6007819055620002d05760405162461bcd60e51b815260206004820152601060248201526f07573642d7065722d7365632d69732d360841b604482015260640162000109565b6040516430b236b4b760d91b60208201526200030c9060250160405160208183030381529060405280519060200120876200038860201b60201c565b604051677061757361626c6560c01b60208201526200037c90602801604051602081830303815290604052805190602001206040516020016200035a906430b236b4b760d91b815260050190565b604051602081830303815290604052805190602001206200039860201b60201c565b5050505050506200072d565b620003948282620003e3565b5050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000394576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200043f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b8280546200049190620006f0565b90600052602060002090601f016020900481019282620004b5576000855562000500565b82601f10620004d057805160ff191683800117855562000500565b8280016001018555821562000500579182015b8281111562000500578251825591602001919060010190620004e3565b506200050e92915062000512565b5090565b5b808211156200050e576000815560010162000513565b80516001600160a01b03811681146200054157600080fd5b919050565b60008060008060008060c087890312156200056057600080fd5b6200056b8762000529565b95506200057b6020880162000529565b945060408701519350620005926060880162000529565b9250620005a26080880162000529565b915060a087015190509295509295509295565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215620005df57600080fd5b82516001600160401b0380821115620005f757600080fd5b818501915085601f8301126200060c57600080fd5b815181811115620006215762000621620005b5565b604051601f8201601f19908116603f011681019083821181831017156200064c576200064c620005b5565b8160405282815288868487010111156200066557600080fd5b600093505b828410156200068957848401860151818501870152928501926200066a565b828411156200069b5760008684830101525b98975050505050505050565b600082821015620006c857634e487b7160e01b600052601160045260246000fd5b500390565b600082620006eb57634e487b7160e01b600052601260045260246000fd5b500490565b600181811c908216806200070557607f821691505b602082108114156200072757634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051611b60620007aa600039600081816103c901528181610e1a0152610ff001526000818161044c01528181610e4901528181610fbe0152818161109901526110de01526000818161023301528181610577015281816107580152818161090401528181610b300152610c2b0152611b606000f3fe608060405234801561001057600080fd5b50600436106101d95760003560e01c8063a217fddf11610104578063d547741f116100a2578063f3ca5edf11610071578063f3ca5edf1461042c578063f6d6d5aa1461043f578063fc0c546a14610447578063ffa1ad741461046e57600080fd5b8063d547741f146103fe578063d9d1bc2714610411578063e834a8341461041a578063f0d909371461042357600080fd5b8063af38d757116100de578063af38d757146103b4578063b87fe774146103bc578063c45a0155146103c4578063d3b7bfb4146103eb57600080fd5b8063a217fddf14610350578063a3f4df7e14610358578063ae90b213146103a157600080fd5b806336568abe1161017c57806361cd014d1161014b57806361cd014d146102ea57806378e97925146102fd57806391d148541461030657806398416f0e1461033d57600080fd5b806336568abe146102ba5780634b7c6617146102cd5780634e71d92d146102d55780635c975abb146102dd57600080fd5b8063123119cd116101b8578063123119cd1461022e57806319f7671b1461026d578063248a9ca3146102845780632f2ff15d146102a757600080fd5b80627adac4146101de57806301ffc9a7146101f357806303b86b551461021b575b600080fd5b6101f16101ec366004611843565b610476565b005b61020661020136600461185e565b61050b565b60405190151581526020015b60405180910390f35b6101f1610229366004611888565b610574565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610212565b61027660065481565b604051908152602001610212565b6102766102923660046118aa565b60009081526020819052604090206001015490565b6101f16102b53660046118c3565b61069f565b6101f16102c83660046118c3565b6106c9565b6101f1610755565b6101f1610841565b6009546102069060ff1681565b6101f16102f8366004611843565b610901565b61027660055481565b6102066103143660046118c3565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6101f161034b366004611843565b610ae7565b610276600081565b6103946040518060400160405280600d81526020017f5061796d656e7453747265616d0000000000000000000000000000000000000081525081565b604051610212919061191b565b600254610255906001600160a01b031681565b610276610b1e565b6101f1610b2d565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b600354610255906001600160a01b031681565b6101f161040c3660046118c3565b610c03565b61027660075481565b61027660085481565b61027660045481565b6101f161043a366004611843565b610c28565b610276610e16565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b610394610eec565b6001600160a01b0381166104d15760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642d64656c65676174650000000000000000000000000000000060448201526064015b60405180910390fd5b604051677061757361626c6560c01b602082015261050890602801604051602081830303815290604052805190602001208261069f565b50565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061056e57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146105df5760405162461bcd60e51b815260206004820152601060248201526f3737ba16b9ba3932b0b696b7bbb732b960811b60448201526064016104c8565b42811161062e5760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642d656e642d74696d650000000000000000000000000000000060448201526064016104c8565b610636610f7a565b600482905542600581905561064b9082611964565b600681905561065a908361197b565b600755600060085560408051838152602081018390527f11f23cf1c7a2a194f2b700a80fe1987bf966eb2f8176a0ecf94eec6eb22f408f910160405180910390a15050565b6000828152602081905260409020600101546106ba8161112e565b6106c48383611138565b505050565b6001600160a01b03811633146107475760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016104c8565b61075182826111d6565b5050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614806107c05750604051677061757361626c6560c01b60208201526107c0906028015b604051602081830303815290604052805190602001206103143390565b61080c5760405162461bcd60e51b815260206004820152601d60248201527f6e6f742d73747265616d2d6f776e65722d6f722d64656c65676174656400000060448201526064016104c8565b6009805460ff191690556040517f27196296b54785165ca5e02d8431ca24e4910ce25b0add3fce74aa38927b34a390600090a1565b6002546001600160a01b0316336001600160a01b0316146108a45760405162461bcd60e51b815260206004820152600960248201527f6e6f742d7061796565000000000000000000000000000000000000000000000060448201526064016104c8565b60095460ff16156108f75760405162461bcd60e51b815260206004820152601060248201527f73747265616d2d69732d7061757365640000000000000000000000000000000060448201526064016104c8565b6108ff610f7a565b565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461096c5760405162461bcd60e51b815260206004820152601060248201526f3737ba16b9ba3932b0b696b7bbb732b960811b60448201526064016104c8565b6001600160a01b0381166109c25760405162461bcd60e51b815260206004820152601b60248201527f696e76616c69642d6e65772d66756e64696e672d61646472657373000000000060448201526064016104c8565b6003546001600160a01b0382811691161415610a205760405162461bcd60e51b815260206004820152601860248201527f73616d652d6e65772d66756e64696e672d61646472657373000000000000000060448201526064016104c8565b6002546001600160a01b0382811691161415610a7e5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d66756e64696e672d616464726573732d69732d70617965650000000060448201526064016104c8565b6003546040516001600160a01b038084169216907f45c1138f56e2e3f78c7e80b5c395a6510bbaba05d80c4d66e947c301c9d388f090600090a36003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b604051677061757361626c6560c01b6020820152610508906028016040516020818303038152906040528051906020012082610c03565b6000610b28611255565b905090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480610b7f5750604051677061757361626c6560c01b6020820152610b7f906028016107a3565b610bcb5760405162461bcd60e51b815260206004820152601d60248201527f6e6f742d73747265616d2d6f776e65722d6f722d64656c65676174656400000060448201526064016104c8565b6009805460ff191660011790556040517f8b7fc2110b35688b78e16841494350c1b3329185624cea4b50e59fc2e544a7f890600090a1565b600082815260208190526040902060010154610c1e8161112e565b6106c483836111d6565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610c935760405162461bcd60e51b815260206004820152601060248201526f3737ba16b9ba3932b0b696b7bbb732b960811b60448201526064016104c8565b6001600160a01b038116610ce95760405162461bcd60e51b815260206004820152601160248201527f696e76616c69642d6e65772d706179656500000000000000000000000000000060448201526064016104c8565b6002546001600160a01b0382811691161415610d475760405162461bcd60e51b815260206004820152600e60248201527f73616d652d6e65772d706179656500000000000000000000000000000000000060448201526064016104c8565b6003546001600160a01b0382811691161415610da55760405162461bcd60e51b815260206004820152601c60248201527f6e65772d70617965652d69732d66756e64696e672d616464726573730000000060448201526064016104c8565b610dad610f7a565b6002546040516001600160a01b038084169216907fa9e5978bbfbf156599d86b750e4db433bc414c83e3ee93cae447582d6d42990b90600090a36002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b2211d5c7f0000000000000000000000000000000000000000000000000000000000000000610e70611255565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610eb457600080fd5b505afa158015610ec8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b28919061199d565b60018054610ef9906119b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610f25906119b6565b8015610f725780601f10610f4757610100808354040283529160200191610f72565b820191906000526020600020905b815481529060010190602001808311610f5557829003601f168201915b505050505081565b6000610f84611255565b905080610f8e5750565b6040517fb2211d5c0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390526000917f00000000000000000000000000000000000000000000000000000000000000009091169063b2211d5c9060440160206040518083038186803b15801561103457600080fd5b505afa158015611048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106c919061199d565b9050816008600082825461108091906119f1565b90915550506003546002546110c6916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929181169116846112a3565b60408051838152602081018390526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917fc09f7b3c1c5b70bf6d30e485a4525d625d4723aed5d319376825446ef135c7ca910160405180910390a25050565b6105088133611331565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610751576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556111923390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610751576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080600554426112669190611964565b9050600654811115611288576008546004546112829190611964565b91505090565b600854816007546112999190611a09565b6112829190611964565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261132b9085906113a4565b50505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166107515761136281611489565b61136d83602061149b565b60405160200161137e929190611a28565b60408051601f198184030181529082905262461bcd60e51b82526104c89160040161191b565b60006113f9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116839092919063ffffffff16565b8051909150156106c457808060200190518101906114179190611aa9565b6106c45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104c8565b606061056e6001600160a01b03831660145b606060006114aa836002611a09565b6114b59060026119f1565b67ffffffffffffffff8111156114cd576114cd611acb565b6040519080825280601f01601f1916602001820160405280156114f7576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061152e5761152e611ae1565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061157957611579611ae1565b60200101906001600160f81b031916908160001a905350600061159d846002611a09565b6115a89060016119f1565b90505b600181111561162d577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106115e9576115e9611ae1565b1a60f81b8282815181106115ff576115ff611ae1565b60200101906001600160f81b031916908160001a90535060049490941c9361162681611af7565b90506115ab565b50831561167c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104c8565b9392505050565b6060611692848460008561169a565b949350505050565b6060824710156117125760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104c8565b600080866001600160a01b0316858760405161172e9190611b0e565b60006040518083038185875af1925050503d806000811461176b576040519150601f19603f3d011682016040523d82523d6000602084013e611770565b606091505b50915091506117818783838761178c565b979650505050505050565b606083156117f85782516117f1576001600160a01b0385163b6117f15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104c8565b5081611692565b611692838381511561180d5781518083602001fd5b8060405162461bcd60e51b81526004016104c8919061191b565b80356001600160a01b038116811461183e57600080fd5b919050565b60006020828403121561185557600080fd5b61167c82611827565b60006020828403121561187057600080fd5b81356001600160e01b03198116811461167c57600080fd5b6000806040838503121561189b57600080fd5b50508035926020909101359150565b6000602082840312156118bc57600080fd5b5035919050565b600080604083850312156118d657600080fd5b823591506118e660208401611827565b90509250929050565b60005b8381101561190a5781810151838201526020016118f2565b8381111561132b5750506000910152565b602081526000825180602084015261193a8160408501602087016118ef565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b6000828210156119765761197661194e565b500390565b60008261199857634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156119af57600080fd5b5051919050565b600181811c908216806119ca57607f821691505b602082108114156119eb57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115611a0457611a0461194e565b500190565b6000816000190483118215151615611a2357611a2361194e565b500290565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611a608160178501602088016118ef565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611a9d8160288401602088016118ef565b01602801949350505050565b600060208284031215611abb57600080fd5b8151801515811461167c57600080fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081611b0657611b0661194e565b506000190190565b60008251611b208184602087016118ef565b919091019291505056fea2646970667358221220953d016821cdb902b9e1cea9e2dd3703c34752744d2e25a5a42f901a99187ac664736f6c63430008090033a264697066735822122017abffecf37ff384a855fadfa5e957c401d6ae2e284fc1fb20d543c9f035e78264736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001155760003560e01c8063a3f4df7e11620000a3578063e335e79a116200006e578063e335e79a14620002ba578063f2fde38b14620002c3578063f411d38914620002da578063ffa1ad7414620002e457600080fd5b8063a3f4df7e1462000205578063b01cdf3d1462000251578063b02737ff1462000268578063b2211d5c146200029457600080fd5b806381cc3ba411620000e457806381cc3ba41462000188578063894e9a0d14620001c85780638da5cb5b14620001df57806390238c3914620001f157600080fd5b80632d3965bd146200011a5780635ccc57351462000133578063715018a61462000167578063748f682e1462000171575b600080fd5b620001316200012b36600462000d38565b62000321565b005b6200014a6200014436600462000d76565b6200045a565b6040516001600160a01b0390911681526020015b60405180910390f35b6200013162000599565b620001316200018236600462000dd8565b620005b1565b620001b76200019936600462000df2565b6001600160a01b031660009081526002602052604090205460ff1690565b60405190151581526020016200015e565b6200014a620001d936600462000dd8565b620005fc565b6000546001600160a01b03166200014a565b6003546200014a906001600160a01b031681565b620002426040518060400160405280601481526020017f5061796d656e7453747265616d466163746f727900000000000000000000000081525081565b6040516200015e919062000e19565b620001316200026236600462000df2565b6200062f565b6200014a6200027936600462000df2565b6004602052600090815260409020546001600160a01b031681565b620002ab620002a536600462000e71565b6200075a565b6040519081526020016200015e565b600154620002ab565b62000131620002d436600462000df2565b62000a20565b620002ab60055481565b620002426040518060400160405280600581526020017f312e302e3200000000000000000000000000000000000000000000000000000081525081565b6200032b62000ab6565b6001600160a01b038116620003875760405162461bcd60e51b815260206004820152601760248201527f696e76616c69642d637573746f6d2d666565642d6d617000000000000000000060448201526064015b60405180910390fd5b6001600160a01b0380831660009081526004602052604090205482821691161415620003f65760405162461bcd60e51b815260206004820152601460248201527f73616d652d637573746f6d2d666565642d6d617000000000000000000000000060448201526064016200037e565b6001600160a01b03828116600081815260046020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169486169485179055517f497fb4c9c745286ec067621e3f67117daa1960eb459aa41003d30394070dd2c49190a35050565b60006200046884866200075a565b503386868686866040516200047d9062000d14565b6001600160a01b039687168152948616602086015260408501939093529084166060840152909216608082015260a081019190915260c001604051809103906000f080158015620004d2573d6000803e3d6000fd5b506001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038481169182179092556000818152600260205260409020805460ff19168417905582549394509089169233927fb09edfcf805674d896a73bdea048a368e58a9ee54fe3e177237ba603ce7572239162000579919062000eb6565b60408051918252602082018b90520160405180910390a495945050505050565b620005a362000ab6565b620005af600062000b12565b565b620005bb62000ab6565b60055460408051918252602082018390527fa78b3a7f4155d0f667750fea220b1d92f8a334e9b52f1b0c60fb31d266387c04910160405180910390a1600555565b60006001828154811062000614576200061462000ed0565b6000918252602090912001546001600160a01b031692915050565b6200063962000ab6565b6001600160a01b038116620006915760405162461bcd60e51b815260206004820152601d60248201527f696e76616c69642d666565642d72656769737472792d6164647265737300000060448201526064016200037e565b6003546001600160a01b0382811691161415620006f15760405162461bcd60e51b815260206004820152601a60248201527f73616d652d666565642d72656769737472792d6164647265737300000000000060448201526064016200037e565b6003546040516001600160a01b038084169216907f6d1006252b3dd171af76c28c184327bfddc39f439a50e0ac7f418c660b8894b590600090a36003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546000906001600160a01b031663d2edb6dd620007798562000b6f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152610348602482015260440160206040518083038186803b158015620007d957600080fd5b505afa9250505080156200080c575060408051601f3d908101601f19168201909252620008099181019062000ee6565b60015b62000947576000620008338473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee62000bb7565b905060006200085973eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61034862000bb7565b90506000816200087286670de0b6b3a764000062000f06565b6200087e919062000f28565b9050856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620008ba57600080fd5b505afa158015620008cf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008f5919062000f4b565b6200090290601262000f70565b6200090f90600a62001093565b836200092483670de0b6b3a764000062000f06565b62000930919062000f28565b6200093c919062000f28565b935050505062000a1a565b6000620009578561034862000bb7565b9050846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200099357600080fd5b505afa158015620009a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009ce919062000f4b565b620009db90601262000f70565b620009e890600a62001093565b81620009fd86670de0b6b3a764000062000f06565b62000a09919062000f28565b62000a15919062000f28565b925050505b92915050565b62000a2a62000ab6565b6001600160a01b03811662000aa85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016200037e565b62000ab38162000b12565b50565b6000546001600160a01b03163314620005af5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200037e565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038181166000908152600460205260408120549091161562000bb3576001600160a01b038083166000908152600460205260409020541662000a1a565b5090565b600354600090819081906001600160a01b031663bcfd032d62000bda8762000b6f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039182166004820152908716602482015260440160a06040518083038186803b15801562000c3a57600080fd5b505afa15801562000c4f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c759190620010c4565b509350509250506005546000148062000c9b575060055462000c98824262000eb6565b11155b62000ce95760405162461bcd60e51b815260206004820152600c60248201527f7374616c652d6f7261636c65000000000000000000000000000000000000000060448201526064016200037e565b6001600160a01b0384166103481462000d03578162000a15565b62000a15826402540be40062001119565b61230a80620011e283390190565b6001600160a01b038116811462000ab357600080fd5b6000806040838503121562000d4c57600080fd5b823562000d598162000d22565b9150602083013562000d6b8162000d22565b809150509250929050565b600080600080600060a0868803121562000d8f57600080fd5b853562000d9c8162000d22565b945060208601359350604086013562000db58162000d22565b9250606086013562000dc78162000d22565b949793965091946080013592915050565b60006020828403121562000deb57600080fd5b5035919050565b60006020828403121562000e0557600080fd5b813562000e128162000d22565b9392505050565b600060208083528351808285015260005b8181101562000e485785810183015185820160400152820162000e2a565b8181111562000e5b576000604083870101525b50601f01601f1916929092016040019392505050565b6000806040838503121562000e8557600080fd5b823562000e928162000d22565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008282101562000ecb5762000ecb62000ea0565b500390565b634e487b7160e01b600052603260045260246000fd5b60006020828403121562000ef957600080fd5b815162000e128162000d22565b600081600019048311821515161562000f235762000f2362000ea0565b500290565b60008262000f4657634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121562000f5e57600080fd5b815160ff8116811462000e1257600080fd5b600060ff821660ff84168082101562000f8d5762000f8d62000ea0565b90039392505050565b600181815b8085111562000fd757816000190482111562000fbb5762000fbb62000ea0565b8085161562000fc957918102915b93841c939080029062000f9b565b509250929050565b60008262000ff05750600162000a1a565b8162000fff5750600062000a1a565b8160018114620010185760028114620010235762001043565b600191505062000a1a565b60ff84111562001037576200103762000ea0565b50506001821b62000a1a565b5060208310610133831016604e8410600b841016171562001068575081810a62000a1a565b62001074838362000f96565b80600019048211156200108b576200108b62000ea0565b029392505050565b600062000e1260ff84168362000fdf565b805169ffffffffffffffffffff81168114620010bf57600080fd5b919050565b600080600080600060a08688031215620010dd57600080fd5b620010e886620010a4565b94506020860151935060408601519250606086015191506200110d60808701620010a4565b90509295509295909350565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000841360008413858304851182821616156200115d576200115d62000ea0565b7f800000000000000000000000000000000000000000000000000000000000000060008712868205881281841616156200119b576200119b62000ea0565b60008712925087820587128484161615620011ba57620011ba62000ea0565b87850587128184161615620011d357620011d362000ea0565b50505092909302939250505056fe60e06040523480156200001157600080fd5b506040516200230a3803806200230a833981016040819052620000349162000546565b3360c0819052604080516001621794a360e21b03198152905163ffa1ad7491600480820192600092909190829003018186803b1580156200007457600080fd5b505afa15801562000089573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000b39190810190620005cb565b8051620000c99160019160209091019062000483565b50428111620001125760405162461bcd60e51b815260206004820152601060248201526f696e76616c69642d656e642d74696d6560801b60448201526064015b60405180910390fd5b816001600160a01b0316856001600160a01b03161415620001765760405162461bcd60e51b815260206004820152601860248201527f70617965652d69732d66756e64696e672d616464726573730000000000000000604482015260640162000109565b6001600160a01b038516158015906200019757506001600160a01b03821615155b620001e55760405162461bcd60e51b815260206004820152601d60248201527f70617965652d6f722d66756e64696e672d616464726573732d69732d30000000604482015260640162000109565b60008411620002295760405162461bcd60e51b815260206004820152600f60248201526e07573642d616d6f756e742d69732d3608c1b604482015260640162000109565b600280546001600160a01b038088166001600160a01b031992831617909255600486905584821660a0526003805485841692169190911790558616608052426005819055620002799082620006a7565b60068190556200028a9085620006cd565b6007819055620002d05760405162461bcd60e51b815260206004820152601060248201526f07573642d7065722d7365632d69732d360841b604482015260640162000109565b6040516430b236b4b760d91b60208201526200030c9060250160405160208183030381529060405280519060200120876200038860201b60201c565b604051677061757361626c6560c01b60208201526200037c90602801604051602081830303815290604052805190602001206040516020016200035a906430b236b4b760d91b815260050190565b604051602081830303815290604052805190602001206200039860201b60201c565b5050505050506200072d565b620003948282620003e3565b5050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000394576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200043f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b8280546200049190620006f0565b90600052602060002090601f016020900481019282620004b5576000855562000500565b82601f10620004d057805160ff191683800117855562000500565b8280016001018555821562000500579182015b8281111562000500578251825591602001919060010190620004e3565b506200050e92915062000512565b5090565b5b808211156200050e576000815560010162000513565b80516001600160a01b03811681146200054157600080fd5b919050565b60008060008060008060c087890312156200056057600080fd5b6200056b8762000529565b95506200057b6020880162000529565b945060408701519350620005926060880162000529565b9250620005a26080880162000529565b915060a087015190509295509295509295565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215620005df57600080fd5b82516001600160401b0380821115620005f757600080fd5b818501915085601f8301126200060c57600080fd5b815181811115620006215762000621620005b5565b604051601f8201601f19908116603f011681019083821181831017156200064c576200064c620005b5565b8160405282815288868487010111156200066557600080fd5b600093505b828410156200068957848401860151818501870152928501926200066a565b828411156200069b5760008684830101525b98975050505050505050565b600082821015620006c857634e487b7160e01b600052601160045260246000fd5b500390565b600082620006eb57634e487b7160e01b600052601260045260246000fd5b500490565b600181811c908216806200070557607f821691505b602082108114156200072757634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051611b60620007aa600039600081816103c901528181610e1a0152610ff001526000818161044c01528181610e4901528181610fbe0152818161109901526110de01526000818161023301528181610577015281816107580152818161090401528181610b300152610c2b0152611b606000f3fe608060405234801561001057600080fd5b50600436106101d95760003560e01c8063a217fddf11610104578063d547741f116100a2578063f3ca5edf11610071578063f3ca5edf1461042c578063f6d6d5aa1461043f578063fc0c546a14610447578063ffa1ad741461046e57600080fd5b8063d547741f146103fe578063d9d1bc2714610411578063e834a8341461041a578063f0d909371461042357600080fd5b8063af38d757116100de578063af38d757146103b4578063b87fe774146103bc578063c45a0155146103c4578063d3b7bfb4146103eb57600080fd5b8063a217fddf14610350578063a3f4df7e14610358578063ae90b213146103a157600080fd5b806336568abe1161017c57806361cd014d1161014b57806361cd014d146102ea57806378e97925146102fd57806391d148541461030657806398416f0e1461033d57600080fd5b806336568abe146102ba5780634b7c6617146102cd5780634e71d92d146102d55780635c975abb146102dd57600080fd5b8063123119cd116101b8578063123119cd1461022e57806319f7671b1461026d578063248a9ca3146102845780632f2ff15d146102a757600080fd5b80627adac4146101de57806301ffc9a7146101f357806303b86b551461021b575b600080fd5b6101f16101ec366004611843565b610476565b005b61020661020136600461185e565b61050b565b60405190151581526020015b60405180910390f35b6101f1610229366004611888565b610574565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610212565b61027660065481565b604051908152602001610212565b6102766102923660046118aa565b60009081526020819052604090206001015490565b6101f16102b53660046118c3565b61069f565b6101f16102c83660046118c3565b6106c9565b6101f1610755565b6101f1610841565b6009546102069060ff1681565b6101f16102f8366004611843565b610901565b61027660055481565b6102066103143660046118c3565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6101f161034b366004611843565b610ae7565b610276600081565b6103946040518060400160405280600d81526020017f5061796d656e7453747265616d0000000000000000000000000000000000000081525081565b604051610212919061191b565b600254610255906001600160a01b031681565b610276610b1e565b6101f1610b2d565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b600354610255906001600160a01b031681565b6101f161040c3660046118c3565b610c03565b61027660075481565b61027660085481565b61027660045481565b6101f161043a366004611843565b610c28565b610276610e16565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b610394610eec565b6001600160a01b0381166104d15760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642d64656c65676174650000000000000000000000000000000060448201526064015b60405180910390fd5b604051677061757361626c6560c01b602082015261050890602801604051602081830303815290604052805190602001208261069f565b50565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061056e57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146105df5760405162461bcd60e51b815260206004820152601060248201526f3737ba16b9ba3932b0b696b7bbb732b960811b60448201526064016104c8565b42811161062e5760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642d656e642d74696d650000000000000000000000000000000060448201526064016104c8565b610636610f7a565b600482905542600581905561064b9082611964565b600681905561065a908361197b565b600755600060085560408051838152602081018390527f11f23cf1c7a2a194f2b700a80fe1987bf966eb2f8176a0ecf94eec6eb22f408f910160405180910390a15050565b6000828152602081905260409020600101546106ba8161112e565b6106c48383611138565b505050565b6001600160a01b03811633146107475760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016104c8565b61075182826111d6565b5050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614806107c05750604051677061757361626c6560c01b60208201526107c0906028015b604051602081830303815290604052805190602001206103143390565b61080c5760405162461bcd60e51b815260206004820152601d60248201527f6e6f742d73747265616d2d6f776e65722d6f722d64656c65676174656400000060448201526064016104c8565b6009805460ff191690556040517f27196296b54785165ca5e02d8431ca24e4910ce25b0add3fce74aa38927b34a390600090a1565b6002546001600160a01b0316336001600160a01b0316146108a45760405162461bcd60e51b815260206004820152600960248201527f6e6f742d7061796565000000000000000000000000000000000000000000000060448201526064016104c8565b60095460ff16156108f75760405162461bcd60e51b815260206004820152601060248201527f73747265616d2d69732d7061757365640000000000000000000000000000000060448201526064016104c8565b6108ff610f7a565b565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461096c5760405162461bcd60e51b815260206004820152601060248201526f3737ba16b9ba3932b0b696b7bbb732b960811b60448201526064016104c8565b6001600160a01b0381166109c25760405162461bcd60e51b815260206004820152601b60248201527f696e76616c69642d6e65772d66756e64696e672d61646472657373000000000060448201526064016104c8565b6003546001600160a01b0382811691161415610a205760405162461bcd60e51b815260206004820152601860248201527f73616d652d6e65772d66756e64696e672d61646472657373000000000000000060448201526064016104c8565b6002546001600160a01b0382811691161415610a7e5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d66756e64696e672d616464726573732d69732d70617965650000000060448201526064016104c8565b6003546040516001600160a01b038084169216907f45c1138f56e2e3f78c7e80b5c395a6510bbaba05d80c4d66e947c301c9d388f090600090a36003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b604051677061757361626c6560c01b6020820152610508906028016040516020818303038152906040528051906020012082610c03565b6000610b28611255565b905090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480610b7f5750604051677061757361626c6560c01b6020820152610b7f906028016107a3565b610bcb5760405162461bcd60e51b815260206004820152601d60248201527f6e6f742d73747265616d2d6f776e65722d6f722d64656c65676174656400000060448201526064016104c8565b6009805460ff191660011790556040517f8b7fc2110b35688b78e16841494350c1b3329185624cea4b50e59fc2e544a7f890600090a1565b600082815260208190526040902060010154610c1e8161112e565b6106c483836111d6565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610c935760405162461bcd60e51b815260206004820152601060248201526f3737ba16b9ba3932b0b696b7bbb732b960811b60448201526064016104c8565b6001600160a01b038116610ce95760405162461bcd60e51b815260206004820152601160248201527f696e76616c69642d6e65772d706179656500000000000000000000000000000060448201526064016104c8565b6002546001600160a01b0382811691161415610d475760405162461bcd60e51b815260206004820152600e60248201527f73616d652d6e65772d706179656500000000000000000000000000000000000060448201526064016104c8565b6003546001600160a01b0382811691161415610da55760405162461bcd60e51b815260206004820152601c60248201527f6e65772d70617965652d69732d66756e64696e672d616464726573730000000060448201526064016104c8565b610dad610f7a565b6002546040516001600160a01b038084169216907fa9e5978bbfbf156599d86b750e4db433bc414c83e3ee93cae447582d6d42990b90600090a36002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b2211d5c7f0000000000000000000000000000000000000000000000000000000000000000610e70611255565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610eb457600080fd5b505afa158015610ec8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b28919061199d565b60018054610ef9906119b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610f25906119b6565b8015610f725780601f10610f4757610100808354040283529160200191610f72565b820191906000526020600020905b815481529060010190602001808311610f5557829003601f168201915b505050505081565b6000610f84611255565b905080610f8e5750565b6040517fb2211d5c0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390526000917f00000000000000000000000000000000000000000000000000000000000000009091169063b2211d5c9060440160206040518083038186803b15801561103457600080fd5b505afa158015611048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106c919061199d565b9050816008600082825461108091906119f1565b90915550506003546002546110c6916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929181169116846112a3565b60408051838152602081018390526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917fc09f7b3c1c5b70bf6d30e485a4525d625d4723aed5d319376825446ef135c7ca910160405180910390a25050565b6105088133611331565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610751576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556111923390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610751576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080600554426112669190611964565b9050600654811115611288576008546004546112829190611964565b91505090565b600854816007546112999190611a09565b6112829190611964565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261132b9085906113a4565b50505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166107515761136281611489565b61136d83602061149b565b60405160200161137e929190611a28565b60408051601f198184030181529082905262461bcd60e51b82526104c89160040161191b565b60006113f9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116839092919063ffffffff16565b8051909150156106c457808060200190518101906114179190611aa9565b6106c45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104c8565b606061056e6001600160a01b03831660145b606060006114aa836002611a09565b6114b59060026119f1565b67ffffffffffffffff8111156114cd576114cd611acb565b6040519080825280601f01601f1916602001820160405280156114f7576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061152e5761152e611ae1565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061157957611579611ae1565b60200101906001600160f81b031916908160001a905350600061159d846002611a09565b6115a89060016119f1565b90505b600181111561162d577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106115e9576115e9611ae1565b1a60f81b8282815181106115ff576115ff611ae1565b60200101906001600160f81b031916908160001a90535060049490941c9361162681611af7565b90506115ab565b50831561167c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104c8565b9392505050565b6060611692848460008561169a565b949350505050565b6060824710156117125760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104c8565b600080866001600160a01b0316858760405161172e9190611b0e565b60006040518083038185875af1925050503d806000811461176b576040519150601f19603f3d011682016040523d82523d6000602084013e611770565b606091505b50915091506117818783838761178c565b979650505050505050565b606083156117f85782516117f1576001600160a01b0385163b6117f15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104c8565b5081611692565b611692838381511561180d5781518083602001fd5b8060405162461bcd60e51b81526004016104c8919061191b565b80356001600160a01b038116811461183e57600080fd5b919050565b60006020828403121561185557600080fd5b61167c82611827565b60006020828403121561187057600080fd5b81356001600160e01b03198116811461167c57600080fd5b6000806040838503121561189b57600080fd5b50508035926020909101359150565b6000602082840312156118bc57600080fd5b5035919050565b600080604083850312156118d657600080fd5b823591506118e660208401611827565b90509250929050565b60005b8381101561190a5781810151838201526020016118f2565b8381111561132b5750506000910152565b602081526000825180602084015261193a8160408501602087016118ef565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b6000828210156119765761197661194e565b500390565b60008261199857634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156119af57600080fd5b5051919050565b600181811c908216806119ca57607f821691505b602082108114156119eb57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115611a0457611a0461194e565b500190565b6000816000190483118215151615611a2357611a2361194e565b500290565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611a608160178501602088016118ef565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611a9d8160288401602088016118ef565b01602801949350505050565b600060208284031215611abb57600080fd5b8151801515811461167c57600080fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081611b0657611b0661194e565b506000190190565b60008251611b208184602087016118ef565b919091019291505056fea2646970667358221220953d016821cdb902b9e1cea9e2dd3703c34752744d2e25a5a42f901a99187ac664736f6c63430008090033a264697066735822122017abffecf37ff384a855fadfa5e957c401d6ae2e284fc1fb20d543c9f035e78264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createStream(address,uint256,address,address,uint256)": {
        "details": "Payer (_msgSender()) is set as admin of \"pausableRole\", so he can grant and revoke the \"pausable\" role later on",
        "params": {
          "_endTime": "timestamp that sets drip distribution end",
          "_fundingAddress": "address used to withdraw the drip",
          "_payee": "address that receives the payment stream",
          "_token": "address of the ERC20 token that payee receives as payment",
          "_usdAmount": "uint256 total amount in USD (scaled to 18 decimals) to be distributed until endTime"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCustomFeedMapping(address,address)": {
        "params": {
          "_denomination": "the denomination address that the feed registry uses for _token",
          "_token": "address of the ERC20 token"
        }
      },
      "updateFeedRegistry(address)": {
        "details": "Only contract owner can change feedRegistry",
        "params": {
          "_newAddress": "address of new Chainlink FeedRegistry instance"
        }
      },
      "updateStalenessTolerance(uint256)": {
        "params": {
          "_newTolerance": "new tolerance range in seconds"
        }
      },
      "usdToTokenAmount(address,uint256)": {
        "params": {
          "_amount": "amount in USD (scaled to 18 decimals)",
          "_token": "address of target token"
        },
        "returns": {
          "lastPrice": "target token amount"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createStream(address,uint256,address,address,uint256)": {
        "notice": "Creates a new payment stream"
      },
      "getStream(uint256)": {
        "notice": "Returns address of the stream located at given id"
      },
      "getStreamsCount()": {
        "notice": "Returns no. of streams stored in contract"
      },
      "ours(address)": {
        "notice": "Checks if a address belongs to this contract' streams"
      },
      "updateCustomFeedMapping(address,address)": {
        "notice": "Defines a custom mapping for token denominations in the Feed Registry"
      },
      "updateFeedRegistry(address)": {
        "notice": "Updates Chainlink FeedRegistry contract address"
      },
      "updateStalenessTolerance(uint256)": {
        "notice": "Defines a staleness tolerance for ChainLink price quote It can be set to 0 to recover the drip"
      },
      "usdToTokenAmount(address,uint256)": {
        "notice": "Converts given amount in usd to target token amount using oracle"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 927,
        "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4052,
        "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
        "label": "allStreams",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4056,
        "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
        "label": "isOurs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4059,
        "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
        "label": "feedRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(FeedRegistryInterface)530"
      },
      {
        "astId": 4063,
        "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
        "label": "customFeedMapping",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4066,
        "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
        "label": "stalenessTolerance",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(FeedRegistryInterface)530": {
        "encoding": "inplace",
        "label": "contract FeedRegistryInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}