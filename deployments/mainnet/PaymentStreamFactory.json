{
  "address": "0xf47853220BF59C682CCBd28e7cFF4D4E603a4Ca6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feedRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenDenomination",
          "type": "address"
        }
      ],
      "name": "CustomFeedMappingUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeedRegistry",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeedRegistry",
          "type": "address"
        }
      ],
      "name": "FeedRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stream",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdAmount",
          "type": "uint256"
        }
      ],
      "name": "StreamCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fundingAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "createStream",
      "outputs": [
        {
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "customFeedMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feedRegistry",
      "outputs": [
        {
          "internalType": "contract FeedRegistryInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getStream",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStreamsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_a",
          "type": "address"
        }
      ],
      "name": "ours",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_denomination",
          "type": "address"
        }
      ],
      "name": "updateCustomFeedMapping",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "updateFeedRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "usdToTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb786a8405c7277a895cd858f10c1eea61af456b63eca7228276ad868e067bb10",
  "receipt": {
    "to": null,
    "from": "0x901a826F1254eD1D09295b938a6189e36Efa9c33",
    "contractAddress": "0xf47853220BF59C682CCBd28e7cFF4D4E603a4Ca6",
    "transactionIndex": 188,
    "gasUsed": "3031680",
    "logsBloom": "0x
    "blockHash": "0xaa2e96cc6b6045c7ecffeb5f56e32a03da4505444868e95de989ce7993d7e7eb",
    "transactionHash": "0xb786a8405c7277a895cd858f10c1eea61af456b63eca7228276ad868e067bb10",
    "logs": [
      {
        "transactionIndex": 188,
        "blockNumber": 13495981,
        "transactionHash": "0xb786a8405c7277a895cd858f10c1eea61af456b63eca7228276ad868e067bb10",
        "address": "0xf47853220BF59C682CCBd28e7cFF4D4E603a4Ca6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000901a826f1254ed1d09295b938a6189e36efa9c33"
        ],
        "data": "0x",
        "logIndex": 217,
        "blockHash": "0xaa2e96cc6b6045c7ecffeb5f56e32a03da4505444868e95de989ce7993d7e7eb"
      }
    ],
    "blockNumber": 13495981,
    "cumulativeGasUsed": "15903270",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf"
  ],
  "solcInputHash": "aea4571b3dce214846dc6eb8f00c3323",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feedRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenDenomination\",\"type\":\"address\"}],\"name\":\"CustomFeedMappingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeedRegistry\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeedRegistry\",\"type\":\"address\"}],\"name\":\"FeedRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stream\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"StreamCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customFeedMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feedRegistry\",\"outputs\":[{\"internalType\":\"contract FeedRegistryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStreamsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"ours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_denomination\",\"type\":\"address\"}],\"name\":\"updateCustomFeedMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateFeedRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"usdToTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createStream(address,uint256,address,address,uint256)\":{\"details\":\"Payer (_msgSender()) is set as admin of \\\"pausableRole\\\", so he can grant and revoke the \\\"pausable\\\" role later on\",\"params\":{\"_endTime\":\"timestamp that sets drip distribution end\",\"_fundingAddress\":\"address used to withdraw the drip\",\"_payee\":\"address that receives the payment stream\",\"_token\":\"address of the ERC20 token that payee receives as payment\",\"_usdAmount\":\"uint256 total amount in USD (scaled to 18 decimals) to be distributed until endTime\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCustomFeedMapping(address,address)\":{\"params\":{\"_denomination\":\"the denomination address that the feed registry uses for _token\",\"_token\":\"address of the ERC20 token\"}},\"updateFeedRegistry(address)\":{\"details\":\"Only contract owner can change feedRegistry\",\"params\":{\"_newAddress\":\"address of new Chainlink FeedRegistry instance\"}},\"usdToTokenAmount(address,uint256)\":{\"params\":{\"_amount\":\"amount in USD (scaled to 18 decimals)\",\"_token\":\"address of target token\"},\"returns\":{\"lastPrice\":\"target token amount\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createStream(address,uint256,address,address,uint256)\":{\"notice\":\"Creates a new payment stream\"},\"getStream(uint256)\":{\"notice\":\"Returns address of the stream located at given id\"},\"getStreamsCount()\":{\"notice\":\"Returns no. of streams stored in contract\"},\"ours(address)\":{\"notice\":\"Checks if a address belongs to this contract' streams\"},\"updateCustomFeedMapping(address,address)\":{\"notice\":\"Defines a custom mapping for token denominations in the Feed Registry\"},\"updateFeedRegistry(address)\":{\"notice\":\"Updates Chainlink FeedRegistry contract address\"},\"usdToTokenAmount(address,uint256)\":{\"notice\":\"Converts given amount in usd to target token amount using oracle\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PaymentStreamFactory.sol\":\"PaymentStreamFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Denominations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Denominations {\\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\\n\\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\\n  address public constant USD = address(840);\\n  address public constant GBP = address(826);\\n  address public constant EUR = address(978);\\n  address public constant JPY = address(392);\\n  address public constant KRW = address(410);\\n  address public constant CNY = address(156);\\n  address public constant AUD = address(36);\\n  address public constant CAD = address(124);\\n  address public constant CHF = address(756);\\n  address public constant ARS = address(32);\\n  address public constant PHP = address(608);\\n  address public constant NZD = address(554);\\n  address public constant SGD = address(702);\\n  address public constant NGN = address(566);\\n  address public constant ZAR = address(710);\\n  address public constant RUB = address(643);\\n  address public constant INR = address(356);\\n  address public constant BRL = address(986);\\n}\\n\",\"keccak256\":\"0xee406990d671c95993762c3ee15c77987ee35c3682357c419ff73747a728fc4d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer()\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n  \\n  function latestTimestamp()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function latestRound()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function getAnswer(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n\\n  function getTimestamp(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  event AnswerUpdated(\\n    int256 indexed current,\\n    uint256 indexed roundId,\\n    uint256 updatedAt\\n  );\\n\\n  event NewRound(\\n    uint256 indexed roundId,\\n    address indexed startedBy,\\n    uint256 startedAt\\n  );\\n}\\n\",\"keccak256\":\"0x1a5dc81544a6479f64437a8aca22c869769dd54ee3522c7ef5ebae0d329a28f0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\\n\",\"keccak256\":\"0xe8f8d98b515366730824d24269c7267eee7f0288cf737db8659acbb0c751eb53\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./AggregatorV2V3Interface.sol\\\";\\n\\ninterface FeedRegistryInterface {\\n  struct Phase {\\n    uint16 phaseId;\\n    uint80 startingAggregatorRoundId;\\n    uint80 endingAggregatorRoundId;\\n  }\\n\\n  event FeedProposed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed proposedAggregator,\\n    address currentAggregator,\\n    address sender\\n  );\\n  event FeedConfirmed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed latestAggregator,\\n    address previousAggregator,\\n    uint16 nextPhaseId,\\n    address sender\\n  );\\n\\n  // V3 AggregatorV3Interface\\n\\n  function decimals(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function latestRoundData(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function getRoundData(\\n    address base,\\n    address quote,\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // V2 AggregatorInterface\\n\\n  function latestAnswer(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      int256 answer\\n    );\\n\\n  function latestTimestamp(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 timestamp\\n    );\\n\\n  function latestRound(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 roundId\\n    );\\n\\n  function getAnswer(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      int256 answer\\n    );\\n\\n  function getTimestamp(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 timestamp\\n    );\\n\\n  // Registry getters\\n\\n  function getFeed(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      AggregatorV2V3Interface aggregator\\n    );\\n\\n  function getPhaseFeed(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  )\\n    external\\n    view\\n    returns (\\n      AggregatorV2V3Interface aggregator\\n    );\\n\\n  function isFeedEnabled(\\n    address aggregator\\n  )\\n    external\\n    view\\n    returns (\\n      bool\\n    );\\n\\n  function getPhase(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  )\\n    external\\n    view\\n    returns (\\n      Phase memory phase\\n    );\\n\\n  // Round helpers\\n\\n  function getRoundFeed(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      AggregatorV2V3Interface aggregator\\n    );\\n\\n  function getPhaseRange(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 startingRoundId,\\n      uint80 endingRoundId\\n    );\\n\\n  function getPreviousRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external\\n    view\\n    returns (\\n      uint80 previousRoundId\\n    );\\n\\n  function getNextRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external\\n    view\\n    returns (\\n      uint80 nextRoundId\\n    );\\n\\n  // Feed management\\n\\n  function proposeFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  function confirmFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  // Proposed aggregator\\n\\n  function getProposedFeed(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      AggregatorV2V3Interface proposedAggregator\\n    );\\n\\n  function proposedGetRoundData(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function proposedLatestRoundData(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // Phases\\n  function getCurrentPhaseId(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint16 currentPhaseId\\n    );\\n}\\n\",\"keccak256\":\"0x016d081db2915d0455d148fe805f409200d214bb3c7dfad6e4de139e65d7f893\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/PaymentStream.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IPaymentStream.sol\\\";\\nimport \\\"./interfaces/IPaymentStreamFactoryMetadata.sol\\\";\\n\\ncontract PaymentStream is AccessControl, IPaymentStream {\\n  using SafeERC20 for IERC20;\\n\\n  // solhint-disable var-name-mixedcase\\n  string public VERSION;\\n  // solhint-enable var-name-mixedcase\\n  string public constant NAME = \\\"PaymentStream\\\";\\n\\n  address public immutable payer;\\n  address public immutable token;\\n\\n  address public payee;\\n  address public fundingAddress;\\n\\n  uint256 public usdAmount;\\n  uint256 public startTime;\\n  uint256 public secs;\\n  uint256 public usdPerSec;\\n  uint256 public claimed;\\n\\n  bool public paused;\\n\\n  IPaymentStreamFactoryMetadata public immutable factory;\\n\\n  bytes32 private constant ADMIN_ROLE = keccak256(abi.encodePacked(\\\"admin\\\"));\\n  bytes32 private constant PAUSABLE_ROLE =\\n    keccak256(abi.encodePacked(\\\"pausable\\\"));\\n\\n  modifier onlyPayer() {\\n    require(_msgSender() == payer, \\\"not-stream-owner\\\");\\n    _;\\n  }\\n\\n  modifier onlyPayerOrDelegated() {\\n    require(\\n      _msgSender() == payer || hasRole(PAUSABLE_ROLE, _msgSender()),\\n      \\\"not-stream-owner-or-delegated\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyPayee() {\\n    require(_msgSender() == payee, \\\"not-payee\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Creates a new payment stream\\n   * @dev Payer is set as admin of \\\"PAUSABLE_ROLE\\\", so he can grant and revoke the \\\"pausable\\\" role later on\\n   * @param _payer Owner of the stream\\n   * @param _payee address that receives the payment stream\\n   * @param _usdAmount uint256 total amount in USD (scaled to 18 decimals) to be distributed until endTime\\n   * @param _token address of the ERC20 token that payee receives as payment\\n   * @param _fundingAddress address used to withdraw the drip\\n   * @param _endTime timestamp that sets drip distribution end\\n   */\\n  constructor(\\n    address _payer,\\n    address _payee,\\n    uint256 _usdAmount,\\n    address _token,\\n    address _fundingAddress,\\n    uint256 _endTime\\n  ) {\\n    factory = IPaymentStreamFactoryMetadata(_msgSender());\\n\\n    VERSION = factory.VERSION();\\n\\n    require(_endTime > block.timestamp, \\\"invalid-end-time\\\");\\n    require(_payee != _fundingAddress, \\\"payee-is-funding-address\\\");\\n    require(\\n      _payee != address(0) && _fundingAddress != address(0),\\n      \\\"payee-or-funding-address-is-0\\\"\\n    );\\n\\n    require(_usdAmount > 0, \\\"usd-amount-is-0\\\");\\n\\n    payee = _payee;\\n    usdAmount = _usdAmount;\\n    token = _token;\\n    fundingAddress = _fundingAddress;\\n    payer = _payer;\\n    startTime = block.timestamp;\\n    secs = _endTime - block.timestamp;\\n    usdPerSec = _usdAmount / secs;\\n\\n    require(usdPerSec != 0, \\\"usd-per-sec-is-0\\\");\\n\\n    _setupRole(ADMIN_ROLE, _payer);\\n    _setRoleAdmin(PAUSABLE_ROLE, ADMIN_ROLE);\\n  }\\n\\n  /**\\n   * @notice Delegates pausable capability to new delegate\\n   * @dev Only RoleAdmin (Payer) can delegate this capability, tx will revert otherwise\\n   * @param _delegate address that receives the \\\"PAUSABLE_ROLE\\\"\\n   */\\n  function delegatePausable(address _delegate) external override {\\n    require(_delegate != address(0), \\\"invalid-delegate\\\");\\n\\n    grantRole(PAUSABLE_ROLE, _delegate);\\n  }\\n\\n  /**\\n   * @notice Revokes pausable capability of a delegate\\n   * @dev Only RoleAdmin (Payer) can revoke this capability, tx will revert otherwise\\n   * @param _delegate address that has its \\\"PAUSABLE_ROLE\\\" revoked\\n   */\\n  function revokePausable(address _delegate) external override {\\n    revokeRole(PAUSABLE_ROLE, _delegate);\\n  }\\n\\n  /**\\n   * @notice Pauses a stream if caller is either the payer or a delegate of PAUSABLE_ROLE\\n   */\\n  function pauseStream() external override onlyPayerOrDelegated {\\n    paused = true;\\n    emit StreamPaused();\\n  }\\n\\n  /**\\n   * @notice Unpauses a stream if caller is either the payer or a delegate of PAUSABLE_ROLE\\n   */\\n  function unpauseStream() external override onlyPayerOrDelegated {\\n    paused = false;\\n    emit StreamUnpaused();\\n  }\\n\\n  /**\\n   * @notice If caller is the payer of the stream it sets a new address as receiver of the stream\\n   * @param _newPayee address of new payee\\n   */\\n  function updatePayee(address _newPayee) external override onlyPayer {\\n    require(_newPayee != address(0), \\\"invalid-new-payee\\\");\\n    require(_newPayee != payee, \\\"same-new-payee\\\");\\n    require(_newPayee != fundingAddress, \\\"new-payee-is-funding-address\\\");\\n\\n    _claim();\\n\\n    emit PayeeUpdated(payee, _newPayee);\\n    payee = _newPayee;\\n  }\\n\\n  /**\\n   * @notice If caller is the payer of the stream it sets a new address used to withdraw the drip\\n   * @param _newFundingAddress new address used to withdraw the drip\\n   */\\n  function updateFundingAddress(address _newFundingAddress)\\n    external\\n    override\\n    onlyPayer\\n  {\\n    require(_newFundingAddress != address(0), \\\"invalid-new-funding-address\\\");\\n    require(_newFundingAddress != fundingAddress, \\\"same-new-funding-address\\\");\\n    require(_newFundingAddress != payee, \\\"new-funding-address-is-payee\\\");\\n\\n    emit FundingAddressUpdated(fundingAddress, _newFundingAddress);\\n\\n    fundingAddress = _newFundingAddress;\\n  }\\n\\n  /**\\n   * @notice If caller is the payer it increases or decreases a stream funding rate\\n   * @dev Any unclaimed drip amount remaining will be claimed on behalf of payee\\n   * @param _usdAmount uint256 total amount in USD (scaled to 18 decimals) to be distributed until endTime\\n   * @param _endTime timestamp that sets drip distribution end\\n   */\\n  function updateFundingRate(uint256 _usdAmount, uint256 _endTime)\\n    external\\n    override\\n    onlyPayer\\n  {\\n    require(_endTime > block.timestamp, \\\"invalid-end-time\\\");\\n\\n    _claim();\\n\\n    usdAmount = _usdAmount;\\n    startTime = block.timestamp;\\n    secs = _endTime - block.timestamp;\\n    usdPerSec = _usdAmount / secs;\\n    claimed = 0;\\n\\n    emit StreamUpdated(_usdAmount, _endTime);\\n  }\\n\\n  /**\\n   * @notice If caller is the payee of the stream it receives the accrued drip amount\\n   */\\n  function claim() external override onlyPayee {\\n    require(!paused, \\\"stream-is-paused\\\");\\n    _claim();\\n  }\\n\\n  function claimable() external view override returns (uint256) {\\n    return _claimable();\\n  }\\n\\n  /**\\n   * @notice Helper function, gets the accrued drip of given stream converted into target token amount\\n   * @return uint256 amount in target token\\n   */\\n  function claimableToken() external view override returns (uint256) {\\n    return factory.usdToTokenAmount(token, _claimable());\\n  }\\n\\n  function _claim() internal {\\n    uint256 _accumulated = _claimable();\\n\\n    if (_accumulated == 0) return;\\n\\n    uint256 _amount = factory.usdToTokenAmount(token, _accumulated);\\n\\n    claimed += _accumulated;\\n\\n    IERC20(token).safeTransferFrom(fundingAddress, payee, _amount);\\n\\n    emit Claimed(_accumulated, _amount);\\n  }\\n\\n  /**\\n   * @notice gets the accrued drip of given stream in USD\\n   * @return uint256 USD amount (scaled to 18 decimals)\\n   */\\n  function _claimable() internal view returns (uint256) {\\n    uint256 _elapsed = block.timestamp - startTime;\\n\\n    if (_elapsed > secs) {\\n      return usdAmount - claimed; // no more drips to avoid floating point dust\\n    }\\n\\n    return (usdPerSec * _elapsed) - claimed;\\n  }\\n}\\n\",\"keccak256\":\"0x867f1921892894e52667cad1a7bd1852e2176686bb58920acdbe4e5e1a6c7464\",\"license\":\"MIT\"},\"contracts/PaymentStreamFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/Denominations.sol\\\";\\nimport \\\"./interfaces/IPaymentStreamFactory.sol\\\";\\nimport \\\"./PaymentStream.sol\\\";\\n\\ncontract PaymentStreamFactory is IPaymentStreamFactory, Ownable {\\n  string public constant VERSION = \\\"1.0.2\\\";\\n  string public constant NAME = \\\"PaymentStreamFactory\\\";\\n\\n  address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  address[] private allStreams;\\n  mapping(address => bool) private isOurs;\\n\\n  // Chainlink Feed Registry: https://docs.chain.link/docs/feed-registry/\\n  // Aggregates all supported price feeds in one handy factory contract\\n  // Automatically supported TOKEN/USD and TOKEN/ETH pairs: https://docs.chain.link/docs/ethereum-addresses/\\n  FeedRegistryInterface public feedRegistry;\\n\\n  // Some tokens like ETH or BTC have special addresses in the feed registry\\n  // token address => token denomination in Feed Registry\\n  mapping(address => address) public customFeedMapping;\\n\\n  constructor(address _feedRegistry) {\\n    feedRegistry = FeedRegistryInterface(_feedRegistry);\\n\\n    customFeedMapping[WETH] = Denominations.ETH;\\n  }\\n\\n  /**\\n   * @notice Creates a new payment stream\\n   * @dev Payer (_msgSender()) is set as admin of \\\"pausableRole\\\", so he can grant and revoke the \\\"pausable\\\" role later on\\n   * @param _payee address that receives the payment stream\\n   * @param _usdAmount uint256 total amount in USD (scaled to 18 decimals) to be distributed until endTime\\n   * @param _token address of the ERC20 token that payee receives as payment\\n   * @param _fundingAddress address used to withdraw the drip\\n   * @param _endTime timestamp that sets drip distribution end\\n   */\\n  function createStream(\\n    address _payee,\\n    uint256 _usdAmount,\\n    address _token,\\n    address _fundingAddress,\\n    uint256 _endTime\\n  ) external returns (address streamAddress) {\\n    // Prevents the caller to create a Stream with an unsupported token\\n    // In case a USD/TOKEN or ETH/TOKEN Pair doesn't exist\\n    // This will revert with \\\"Feed not found\\\"\\n    usdToTokenAmount(_token, _usdAmount);\\n\\n    streamAddress = address(\\n      new PaymentStream(\\n        _msgSender(),\\n        _payee,\\n        _usdAmount,\\n        _token,\\n        _fundingAddress,\\n        _endTime\\n      )\\n    );\\n\\n    allStreams.push(streamAddress);\\n    isOurs[streamAddress] = true;\\n\\n    emit StreamCreated(\\n      allStreams.length - 1,\\n      streamAddress,\\n      _msgSender(),\\n      _payee,\\n      _usdAmount\\n    );\\n  }\\n\\n  /**\\n   * @notice Updates Chainlink FeedRegistry contract address\\n   * @dev Only contract owner can change feedRegistry\\n   * @param _newAddress address of new Chainlink FeedRegistry instance\\n   */\\n  function updateFeedRegistry(address _newAddress) external override onlyOwner {\\n    require(_newAddress != address(0), \\\"invalid-feed-registry-address\\\");\\n    require(_newAddress != address(feedRegistry), \\\"same-feed-registry-address\\\");\\n\\n    emit FeedRegistryUpdated(address(feedRegistry), _newAddress);\\n    feedRegistry = FeedRegistryInterface(_newAddress);\\n  }\\n\\n  /**\\n   * @notice Defines a custom mapping for token denominations in the Feed Registry\\n   * @param _token address of the ERC20 token\\n   * @param _denomination the denomination address that the feed registry uses for _token\\n   */\\n  function updateCustomFeedMapping(address _token, address _denomination)\\n    external\\n    onlyOwner\\n  {\\n    require(_denomination != address(0), \\\"invalid-custom-feed-map\\\");\\n    require(_denomination != customFeedMapping[_token], \\\"same-custom-feed-map\\\");\\n\\n    customFeedMapping[_token] = _denomination;\\n    emit CustomFeedMappingUpdated(_token, _denomination);\\n  }\\n\\n  /**\\n   * @notice Converts given amount in usd to target token amount using oracle\\n   * @param _token address of target token\\n   * @param _amount amount in USD (scaled to 18 decimals)\\n   * @return lastPrice target token amount\\n   */\\n  function usdToTokenAmount(address _token, uint256 _amount)\\n    public\\n    view\\n    override\\n    returns (uint256 lastPrice)\\n  {\\n    // tries a direct _token -> USD pair first\\n    try\\n      feedRegistry.getFeed(_tokenDenomination(_token), Denominations.USD)\\n    returns (AggregatorV2V3Interface) {\\n      uint256 _quote = _getQuote(_token, Denominations.USD);\\n      lastPrice =\\n        ((_amount * 1e18) / _quote) /\\n        10**(18 - IERC20Metadata(_token).decimals());\\n    } catch {\\n      // If getFeed reverts, uses token/ETH/usd route\\n      // If a feed doesn't exist for _token/ETH, it will revert with \\\"Feed not found\\\"\\n      uint256 _ethQuote = _getQuote(_token, Denominations.ETH);\\n      uint256 _ethUsdQuote = _getQuote(Denominations.ETH, Denominations.USD);\\n      uint256 _amountInETH = (_amount * 1e18) / _ethUsdQuote;\\n      lastPrice =\\n        ((_amountInETH * 1e18) / _ethQuote) /\\n        10**(18 - IERC20Metadata(_token).decimals());\\n    }\\n  }\\n\\n  /**\\n   * @notice Checks if a address belongs to this contract' streams\\n   */\\n  function ours(address _a) external view override returns (bool) {\\n    return isOurs[_a];\\n  }\\n\\n  /**\\n   * @notice Returns no. of streams stored in contract\\n   */\\n  function getStreamsCount() external view override returns (uint256) {\\n    return allStreams.length;\\n  }\\n\\n  /**\\n   * @notice Returns address of the stream located at given id\\n   */\\n  function getStream(uint256 _idx) external view override returns (address) {\\n    return allStreams[_idx];\\n  }\\n\\n  function _getQuote(address _base, address _quote)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    (, int256 _price, , , ) =\\n      feedRegistry.latestRoundData(_tokenDenomination(_base), _quote);\\n\\n    // USD decimals is 8 in ChainLink, scales it up to 18 decimals\\n    _price = (_quote == Denominations.USD) ? _price * 1e10 : _price;\\n    return uint256(_price);\\n  }\\n\\n  function _tokenDenomination(address _token) internal view returns (address) {\\n    return\\n      (customFeedMapping[_token] == address(0))\\n        ? _token\\n        : customFeedMapping[_token];\\n  }\\n}\\n\",\"keccak256\":\"0xa58650a881c8d649d0be828f80dfdfb37799c9021653f17718c3873e385ad388\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentStream.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IPaymentStream {\\n  event Claimed(uint256 usdAmount, uint256 tokenAmount);\\n  event StreamPaused();\\n  event StreamUnpaused();\\n  event StreamUpdated(uint256 usdAmount, uint256 endTime);\\n\\n  event FundingAddressUpdated(\\n    address indexed previousFundingAddress,\\n    address indexed newFundingAddress\\n  );\\n  event PayeeUpdated(address indexed previousPayee, address indexed newPayee);\\n\\n  function claim() external;\\n\\n  function pauseStream() external;\\n\\n  function unpauseStream() external;\\n\\n  function delegatePausable(address delegate) external;\\n\\n  function revokePausable(address delegate) external;\\n\\n  function updateFundingRate(uint256 usdAmount, uint256 endTime) external;\\n\\n  function updateFundingAddress(address newFundingAddress) external;\\n\\n  function updatePayee(address newPayee) external;\\n\\n  function claimableToken() external view returns (uint256);\\n\\n  function claimable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x305406c40a3cc499000b7cd7102e633eb1b927fb2e82dff14aa676d7239357de\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentStreamFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IPaymentStreamFactory {\\n  event StreamCreated(\\n    uint256 id,\\n    address indexed stream,\\n    address indexed payer,\\n    address indexed payee,\\n    uint256 usdAmount\\n  );\\n\\n  event CustomFeedMappingUpdated(\\n    address indexed token,\\n    address indexed tokenDenomination\\n  );\\n\\n  event FeedRegistryUpdated(\\n    address indexed previousFeedRegistry,\\n    address indexed newFeedRegistry\\n  );\\n\\n  function updateFeedRegistry(address newAddress) external;\\n\\n  function usdToTokenAmount(address _token, uint256 _amount)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function ours(address _a) external view returns (bool);\\n\\n  function getStreamsCount() external view returns (uint256);\\n\\n  function getStream(uint256 _idx) external view returns (address);\\n}\\n\",\"keccak256\":\"0xfe2d1312311d47a3b5ab744f9d92a4d049540a9bf7b52d6212eeeddc0a481b06\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentStreamFactoryMetadata.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPaymentStreamFactory.sol\\\";\\n\\ninterface IPaymentStreamFactoryMetadata is IPaymentStreamFactory {\\n  // solhint-disable func-name-mixedcase\\n  function NAME() external view returns (string memory);\\n\\n  function VERSION() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x71cab6a1f106c2ad2bf1c2b1524f0311aaa8731930aaa2cd32f9ba31cbcd59fc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161360338038061360383398101604081905261002f916100ed565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600380546001600160a01b039092166001600160a01b031992831617905573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc260005260046020527e137c28eabea4eda5601e544e6551e6761ee561d32c4142c29e0f892835a361805490911673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee17905561011d565b6000602082840312156100ff57600080fd5b81516001600160a01b038116811461011657600080fd5b9392505050565b6134d78061012c6000396000f3fe60806040523480156200001157600080fd5b5060043610620000fd5760003560e01c8063a3f4df7e1162000097578063b2211d5c116200006e578063b2211d5c1462000265578063e335e79a146200028b578063f2fde38b1462000294578063ffa1ad7414620002ab57600080fd5b8063a3f4df7e14620001d6578063b01cdf3d1462000222578063b02737ff146200023957600080fd5b806381cc3ba411620000d857806381cc3ba41462000159578063894e9a0d14620001995780638da5cb5b14620001b057806390238c3914620001c257600080fd5b80632d3965bd14620001025780635ccc5735146200011b578063715018a6146200014f575b600080fd5b620001196200011336600462000d41565b620002e8565b005b620001326200012c36600462000d7f565b62000466565b6040516001600160a01b0390911681526020015b60405180910390f35b6200011962000598565b620001886200016a36600462000de1565b6001600160a01b031660009081526002602052604090205460ff1690565b604051901515815260200162000146565b62000132620001aa36600462000e08565b6200063e565b6000546001600160a01b031662000132565b60035462000132906001600160a01b031681565b620002136040518060400160405280601481526020017f5061796d656e7453747265616d466163746f727900000000000000000000000081525081565b60405162000146919062000e22565b620001196200023336600462000de1565b62000671565b620001326200024a36600462000de1565b6004602052600090815260409020546001600160a01b031681565b6200027c6200027636600462000e7a565b620007e1565b60405190815260200162000146565b6001546200027c565b62000119620002a536600462000de1565b62000aa7565b620002136040518060400160405280600581526020017f312e302e3200000000000000000000000000000000000000000000000000000081525081565b6000546001600160a01b03163314620003485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620003a05760405162461bcd60e51b815260206004820152601760248201527f696e76616c69642d637573746f6d2d666565642d6d617000000000000000000060448201526064016200033f565b6001600160a01b03808316600090815260046020526040902054828216911614156200040f5760405162461bcd60e51b815260206004820152601460248201527f73616d652d637573746f6d2d666565642d6d617000000000000000000000000060448201526064016200033f565b6001600160a01b0382811660008181526004602052604080822080546001600160a01b0319169486169485179055517f497fb4c9c745286ec067621e3f67117daa1960eb459aa41003d30394070dd2c49190a35050565b6000620004748486620007e1565b50338686868686604051620004899062000d1a565b6001600160a01b039687168152948616602086015260408501939093529084166060840152909216608082015260a081019190915260c001604051809103906000f080158015620004de573d6000803e3d6000fd5b506001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b038481169182179092556000818152600260205260409020805460ff19168417905582549394509089169233927fb09edfcf805674d896a73bdea048a368e58a9ee54fe3e177237ba603ce7572239162000578919062000ebf565b60408051918252602082018b90520160405180910390a495945050505050565b6000546001600160a01b03163314620005f45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200033f565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60006001828154811062000656576200065662000ed9565b6000918252602090912001546001600160a01b031692915050565b6000546001600160a01b03163314620006cd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200033f565b6001600160a01b038116620007255760405162461bcd60e51b815260206004820152601d60248201527f696e76616c69642d666565642d72656769737472792d6164647265737300000060448201526064016200033f565b6003546001600160a01b0382811691161415620007855760405162461bcd60e51b815260206004820152601a60248201527f73616d652d666565642d72656769737472792d6164647265737300000000000060448201526064016200033f565b6003546040516001600160a01b038084169216907f6d1006252b3dd171af76c28c184327bfddc39f439a50e0ac7f418c660b8894b590600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6003546000906001600160a01b031663d2edb6dd620008008562000bdc565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152610348602482015260440160206040518083038186803b1580156200086057600080fd5b505afa92505050801562000893575060408051601f3d908101601f19168201909252620008909181019062000eef565b60015b620009ce576000620008ba8473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee62000c24565b90506000620008e073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61034862000c24565b9050600081620008f986670de0b6b3a764000062000f0f565b62000905919062000f31565b9050856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200094157600080fd5b505afa15801562000956573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200097c919062000f54565b6200098990601262000f79565b6200099690600a6200109c565b83620009ab83670de0b6b3a764000062000f0f565b620009b7919062000f31565b620009c3919062000f31565b935050505062000aa1565b6000620009de8561034862000c24565b9050846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a1a57600080fd5b505afa15801562000a2f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a55919062000f54565b62000a6290601262000f79565b62000a6f90600a6200109c565b8162000a8486670de0b6b3a764000062000f0f565b62000a90919062000f31565b62000a9c919062000f31565b925050505b92915050565b6000546001600160a01b0316331462000b035760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200033f565b6001600160a01b03811662000b815760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016200033f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038181166000908152600460205260408120549091161562000c20576001600160a01b038083166000908152600460205260409020541662000aa1565b5090565b60035460009081906001600160a01b031663bcfd032d62000c458662000bdc565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039182166004820152908616602482015260440160a06040518083038186803b15801562000ca557600080fd5b505afa15801562000cba573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ce09190620010cd565b509193505050506001600160a01b0383166103481462000d01578062000d12565b62000d12816402540be40062001122565b949350505050565b6122b780620011eb83390190565b6001600160a01b038116811462000d3e57600080fd5b50565b6000806040838503121562000d5557600080fd5b823562000d628162000d28565b9150602083013562000d748162000d28565b809150509250929050565b600080600080600060a0868803121562000d9857600080fd5b853562000da58162000d28565b945060208601359350604086013562000dbe8162000d28565b9250606086013562000dd08162000d28565b949793965091946080013592915050565b60006020828403121562000df457600080fd5b813562000e018162000d28565b9392505050565b60006020828403121562000e1b57600080fd5b5035919050565b600060208083528351808285015260005b8181101562000e515785810183015185820160400152820162000e33565b8181111562000e64576000604083870101525b50601f01601f1916929092016040019392505050565b6000806040838503121562000e8e57600080fd5b823562000e9b8162000d28565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008282101562000ed45762000ed462000ea9565b500390565b634e487b7160e01b600052603260045260246000fd5b60006020828403121562000f0257600080fd5b815162000e018162000d28565b600081600019048311821515161562000f2c5762000f2c62000ea9565b500290565b60008262000f4f57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121562000f6757600080fd5b815160ff8116811462000e0157600080fd5b600060ff821660ff84168082101562000f965762000f9662000ea9565b90039392505050565b600181815b8085111562000fe057816000190482111562000fc45762000fc462000ea9565b8085161562000fd257918102915b93841c939080029062000fa4565b509250929050565b60008262000ff95750600162000aa1565b81620010085750600062000aa1565b81600181146200102157600281146200102c576200104c565b600191505062000aa1565b60ff84111562001040576200104062000ea9565b50506001821b62000aa1565b5060208310610133831016604e8410600b841016171562001071575081810a62000aa1565b6200107d838362000f9f565b806000190482111562001094576200109462000ea9565b029392505050565b600062000e0160ff84168362000fe8565b805169ffffffffffffffffffff81168114620010c857600080fd5b919050565b600080600080600060a08688031215620010e657600080fd5b620010f186620010ad565b94506020860151935060408601519250606086015191506200111660808701620010ad565b90509295509295909350565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60008413600084138583048511828216161562001166576200116662000ea9565b7f80000000000000000000000000000000000000000000000000000000000000006000871286820588128184161615620011a457620011a462000ea9565b60008712925087820587128484161615620011c357620011c362000ea9565b87850587128184161615620011dc57620011dc62000ea9565b50505092909302939250505056fe60e06040523480156200001157600080fd5b50604051620022b7380380620022b783398101604081905262000034916200054f565b3360c0819052604080516001621794a360e21b03198152905163ffa1ad7491600480820192600092909190829003018186803b1580156200007457600080fd5b505afa15801562000089573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000b39190810190620005d4565b8051620000c9916001916020909101906200048c565b50428111620001125760405162461bcd60e51b815260206004820152601060248201526f696e76616c69642d656e642d74696d6560801b60448201526064015b60405180910390fd5b816001600160a01b0316856001600160a01b03161415620001765760405162461bcd60e51b815260206004820152601860248201527f70617965652d69732d66756e64696e672d616464726573730000000000000000604482015260640162000109565b6001600160a01b038516158015906200019757506001600160a01b03821615155b620001e55760405162461bcd60e51b815260206004820152601d60248201527f70617965652d6f722d66756e64696e672d616464726573732d69732d30000000604482015260640162000109565b60008411620002295760405162461bcd60e51b815260206004820152600f60248201526e07573642d616d6f756e742d69732d3608c1b604482015260640162000109565b600280546001600160a01b038088166001600160a01b031992831617909255600486905584821660a0526003805485841692169190911790558616608052426005819055620002799082620006b0565b60068190556200028a9085620006d6565b6007819055620002d05760405162461bcd60e51b815260206004820152601060248201526f07573642d7065722d7365632d69732d360841b604482015260640162000109565b6040516430b236b4b760d91b60208201526200030c9060250160405160208183030381529060405280519060200120876200038860201b60201c565b604051677061757361626c6560c01b60208201526200037c90602801604051602081830303815290604052805190602001206040516020016200035a906430b236b4b760d91b815260050190565b604051602081830303815290604052805190602001206200039860201b60201c565b50505050505062000736565b620003948282620003ec565b5050565b600082815260208190526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526020829052604090912060010155565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000394576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620004483390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b8280546200049a90620006f9565b90600052602060002090601f016020900481019282620004be576000855562000509565b82601f10620004d957805160ff191683800117855562000509565b8280016001018555821562000509579182015b8281111562000509578251825591602001919060010190620004ec565b50620005179291506200051b565b5090565b5b808211156200051757600081556001016200051c565b80516001600160a01b03811681146200054a57600080fd5b919050565b60008060008060008060c087890312156200056957600080fd5b620005748762000532565b9550620005846020880162000532565b9450604087015193506200059b6060880162000532565b9250620005ab6080880162000532565b915060a087015190509295509295509295565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215620005e857600080fd5b82516001600160401b03808211156200060057600080fd5b818501915085601f8301126200061557600080fd5b8151818111156200062a576200062a620005be565b604051601f8201601f19908116603f01168101908382118183101715620006555762000655620005be565b8160405282815288868487010111156200066e57600080fd5b600093505b8284101562000692578484018601518185018701529285019262000673565b82841115620006a45760008684830101525b98975050505050505050565b600082821015620006d157634e487b7160e01b600052601160045260246000fd5b500390565b600082620006f457634e487b7160e01b600052601260045260246000fd5b500490565b600181811c908216806200070e57607f821691505b602082108114156200073057634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051611b0b620007ac600039600081816103c901528181610e1d0152610ff301526000818161044c01528181610e4c01528181610fc1015261109c015260008181610233015281816105770152818161075a0152818161090601528181610b320152610c2e0152611b0b6000f3fe608060405234801561001057600080fd5b50600436106101d95760003560e01c8063a217fddf11610104578063d547741f116100a2578063f3ca5edf11610071578063f3ca5edf1461042c578063f6d6d5aa1461043f578063fc0c546a14610447578063ffa1ad741461046e57600080fd5b8063d547741f146103fe578063d9d1bc2714610411578063e834a8341461041a578063f0d909371461042357600080fd5b8063af38d757116100de578063af38d757146103b4578063b87fe774146103bc578063c45a0155146103c4578063d3b7bfb4146103eb57600080fd5b8063a217fddf14610350578063a3f4df7e14610358578063ae90b213146103a157600080fd5b806336568abe1161017c57806361cd014d1161014b57806361cd014d146102ea57806378e97925146102fd57806391d148541461030657806398416f0e1461033d57600080fd5b806336568abe146102ba5780634b7c6617146102cd5780634e71d92d146102d55780635c975abb146102dd57600080fd5b8063123119cd116101b8578063123119cd1461022e57806319f7671b1461026d578063248a9ca3146102845780632f2ff15d146102a757600080fd5b80627adac4146101de57806301ffc9a7146101f357806303b86b551461021b575b600080fd5b6101f16101ec3660046117ee565b610476565b005b610206610201366004611809565b61050b565b60405190151581526020015b60405180910390f35b6101f1610229366004611833565b610574565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610212565b61027660065481565b604051908152602001610212565b610276610292366004611855565b60009081526020819052604090206001015490565b6101f16102b536600461186e565b6106a0565b6101f16102c836600461186e565b6106cb565b6101f1610757565b6101f1610843565b6009546102069060ff1681565b6101f16102f83660046117ee565b610903565b61027660055481565b61020661031436600461186e565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6101f161034b3660046117ee565b610ae9565b610276600081565b6103946040518060400160405280600d81526020017f5061796d656e7453747265616d0000000000000000000000000000000000000081525081565b60405161021291906118c6565b600254610255906001600160a01b031681565b610276610b20565b6101f1610b2f565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b600354610255906001600160a01b031681565b6101f161040c36600461186e565b610c05565b61027660075481565b61027660085481565b61027660045481565b6101f161043a3660046117ee565b610c2b565b610276610e19565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b610394610eef565b6001600160a01b0381166104d15760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642d64656c65676174650000000000000000000000000000000060448201526064015b60405180910390fd5b604051677061757361626c6560c01b60208201526105089060280160405160208183030381529060405280519060200120826106a0565b50565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061056e57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146105df5760405162461bcd60e51b815260206004820152601060248201526f3737ba16b9ba3932b0b696b7bbb732b960811b60448201526064016104c8565b42811161062e5760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642d656e642d74696d650000000000000000000000000000000060448201526064016104c8565b610636610f7d565b600482905542600581905561064b908261190f565b600681905561065a9083611926565b600755600060085560408051838152602081018390527f11f23cf1c7a2a194f2b700a80fe1987bf966eb2f8176a0ecf94eec6eb22f408f91015b60405180910390a15050565b6000828152602081905260409020600101546106bc81336110ff565b6106c6838361117d565b505050565b6001600160a01b03811633146107495760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016104c8565b610753828261121b565b5050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614806107c25750604051677061757361626c6560c01b60208201526107c2906028015b604051602081830303815290604052805190602001206103143390565b61080e5760405162461bcd60e51b815260206004820152601d60248201527f6e6f742d73747265616d2d6f776e65722d6f722d64656c65676174656400000060448201526064016104c8565b6009805460ff191690556040517f27196296b54785165ca5e02d8431ca24e4910ce25b0add3fce74aa38927b34a390600090a1565b6002546001600160a01b0316336001600160a01b0316146108a65760405162461bcd60e51b815260206004820152600960248201527f6e6f742d7061796565000000000000000000000000000000000000000000000060448201526064016104c8565b60095460ff16156108f95760405162461bcd60e51b815260206004820152601060248201527f73747265616d2d69732d7061757365640000000000000000000000000000000060448201526064016104c8565b610901610f7d565b565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461096e5760405162461bcd60e51b815260206004820152601060248201526f3737ba16b9ba3932b0b696b7bbb732b960811b60448201526064016104c8565b6001600160a01b0381166109c45760405162461bcd60e51b815260206004820152601b60248201527f696e76616c69642d6e65772d66756e64696e672d61646472657373000000000060448201526064016104c8565b6003546001600160a01b0382811691161415610a225760405162461bcd60e51b815260206004820152601860248201527f73616d652d6e65772d66756e64696e672d61646472657373000000000000000060448201526064016104c8565b6002546001600160a01b0382811691161415610a805760405162461bcd60e51b815260206004820152601c60248201527f6e65772d66756e64696e672d616464726573732d69732d70617965650000000060448201526064016104c8565b6003546040516001600160a01b038084169216907f45c1138f56e2e3f78c7e80b5c395a6510bbaba05d80c4d66e947c301c9d388f090600090a36003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b604051677061757361626c6560c01b6020820152610508906028016040516020818303038152906040528051906020012082610c05565b6000610b2a61129a565b905090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480610b815750604051677061757361626c6560c01b6020820152610b81906028016107a5565b610bcd5760405162461bcd60e51b815260206004820152601d60248201527f6e6f742d73747265616d2d6f776e65722d6f722d64656c65676174656400000060448201526064016104c8565b6009805460ff191660011790556040517f8b7fc2110b35688b78e16841494350c1b3329185624cea4b50e59fc2e544a7f890600090a1565b600082815260208190526040902060010154610c2181336110ff565b6106c6838361121b565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610c965760405162461bcd60e51b815260206004820152601060248201526f3737ba16b9ba3932b0b696b7bbb732b960811b60448201526064016104c8565b6001600160a01b038116610cec5760405162461bcd60e51b815260206004820152601160248201527f696e76616c69642d6e65772d706179656500000000000000000000000000000060448201526064016104c8565b6002546001600160a01b0382811691161415610d4a5760405162461bcd60e51b815260206004820152600e60248201527f73616d652d6e65772d706179656500000000000000000000000000000000000060448201526064016104c8565b6003546001600160a01b0382811691161415610da85760405162461bcd60e51b815260206004820152601c60248201527f6e65772d70617965652d69732d66756e64696e672d616464726573730000000060448201526064016104c8565b610db0610f7d565b6002546040516001600160a01b038084169216907fa9e5978bbfbf156599d86b750e4db433bc414c83e3ee93cae447582d6d42990b90600090a36002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b2211d5c7f0000000000000000000000000000000000000000000000000000000000000000610e7361129a565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610eb757600080fd5b505afa158015610ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a9190611948565b60018054610efc90611961565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2890611961565b8015610f755780601f10610f4a57610100808354040283529160200191610f75565b820191906000526020600020905b815481529060010190602001808311610f5857829003601f168201915b505050505081565b6000610f8761129a565b905080610f915750565b6040517fb2211d5c0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390526000917f00000000000000000000000000000000000000000000000000000000000000009091169063b2211d5c9060440160206040518083038186803b15801561103757600080fd5b505afa15801561104b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106f9190611948565b90508160086000828254611083919061199c565b90915550506003546002546110c9916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929181169116846112e8565b60408051838152602081018390527fc83b5086ce94ec8d5a88a9f5fea4b18a522bb238ed0d2d8abd959549a80c16b89101610694565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166107535761113b816001600160a01b03166014611376565b611146836020611376565b6040516020016111579291906119b4565b60408051601f198184030181529082905262461bcd60e51b82526104c8916004016118c6565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610753576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556111d73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610753576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080600554426112ab919061190f565b90506006548111156112cd576008546004546112c7919061190f565b91505090565b600854816007546112de9190611a35565b6112c7919061190f565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261137090859061155e565b50505050565b60606000611385836002611a35565b61139090600261199c565b67ffffffffffffffff8111156113a8576113a8611a54565b6040519080825280601f01601f1916602001820160405280156113d2576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061140957611409611a6a565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061145457611454611a6a565b60200101906001600160f81b031916908160001a9053506000611478846002611a35565b61148390600161199c565b90505b6001811115611508577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106114c4576114c4611a6a565b1a60f81b8282815181106114da576114da611a6a565b60200101906001600160f81b031916908160001a90535060049490941c9361150181611a80565b9050611486565b5083156115575760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104c8565b9392505050565b60006115b3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116439092919063ffffffff16565b8051909150156106c657808060200190518101906115d19190611a97565b6106c65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104c8565b6060611652848460008561165a565b949350505050565b6060824710156116d25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104c8565b843b6117205760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104c8565b600080866001600160a01b0316858760405161173c9190611ab9565b60006040518083038185875af1925050503d8060008114611779576040519150601f19603f3d011682016040523d82523d6000602084013e61177e565b606091505b509150915061178e828286611799565b979650505050505050565b606083156117a8575081611557565b8251156117b85782518084602001fd5b8160405162461bcd60e51b81526004016104c891906118c6565b80356001600160a01b03811681146117e957600080fd5b919050565b60006020828403121561180057600080fd5b611557826117d2565b60006020828403121561181b57600080fd5b81356001600160e01b03198116811461155757600080fd5b6000806040838503121561184657600080fd5b50508035926020909101359150565b60006020828403121561186757600080fd5b5035919050565b6000806040838503121561188157600080fd5b82359150611891602084016117d2565b90509250929050565b60005b838110156118b557818101518382015260200161189d565b838111156113705750506000910152565b60208152600082518060208401526118e581604085016020870161189a565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b600082821015611921576119216118f9565b500390565b60008261194357634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561195a57600080fd5b5051919050565b600181811c9082168061197557607f821691505b6020821081141561199657634e487b7160e01b600052602260045260246000fd5b50919050565b600082198211156119af576119af6118f9565b500190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516119ec81601785016020880161189a565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611a2981602884016020880161189a565b01602801949350505050565b6000816000190483118215151615611a4f57611a4f6118f9565b500290565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081611a8f57611a8f6118f9565b506000190190565b600060208284031215611aa957600080fd5b8151801515811461155757600080fd5b60008251611acb81846020870161189a565b919091019291505056fea2646970667358221220d8cc08265955021cde2be308ec70395958917703ece9833b69027c077a047e0d64736f6c63430008090033a2646970667358221220d7b0de33f42ad39b66511188fdd4314152fbad707bb6faf20e7fc4f65193461864736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000fd5760003560e01c8063a3f4df7e1162000097578063b2211d5c116200006e578063b2211d5c1462000265578063e335e79a146200028b578063f2fde38b1462000294578063ffa1ad7414620002ab57600080fd5b8063a3f4df7e14620001d6578063b01cdf3d1462000222578063b02737ff146200023957600080fd5b806381cc3ba411620000d857806381cc3ba41462000159578063894e9a0d14620001995780638da5cb5b14620001b057806390238c3914620001c257600080fd5b80632d3965bd14620001025780635ccc5735146200011b578063715018a6146200014f575b600080fd5b620001196200011336600462000d41565b620002e8565b005b620001326200012c36600462000d7f565b62000466565b6040516001600160a01b0390911681526020015b60405180910390f35b6200011962000598565b620001886200016a36600462000de1565b6001600160a01b031660009081526002602052604090205460ff1690565b604051901515815260200162000146565b62000132620001aa36600462000e08565b6200063e565b6000546001600160a01b031662000132565b60035462000132906001600160a01b031681565b620002136040518060400160405280601481526020017f5061796d656e7453747265616d466163746f727900000000000000000000000081525081565b60405162000146919062000e22565b620001196200023336600462000de1565b62000671565b620001326200024a36600462000de1565b6004602052600090815260409020546001600160a01b031681565b6200027c6200027636600462000e7a565b620007e1565b60405190815260200162000146565b6001546200027c565b62000119620002a536600462000de1565b62000aa7565b620002136040518060400160405280600581526020017f312e302e3200000000000000000000000000000000000000000000000000000081525081565b6000546001600160a01b03163314620003485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620003a05760405162461bcd60e51b815260206004820152601760248201527f696e76616c69642d637573746f6d2d666565642d6d617000000000000000000060448201526064016200033f565b6001600160a01b03808316600090815260046020526040902054828216911614156200040f5760405162461bcd60e51b815260206004820152601460248201527f73616d652d637573746f6d2d666565642d6d617000000000000000000000000060448201526064016200033f565b6001600160a01b0382811660008181526004602052604080822080546001600160a01b0319169486169485179055517f497fb4c9c745286ec067621e3f67117daa1960eb459aa41003d30394070dd2c49190a35050565b6000620004748486620007e1565b50338686868686604051620004899062000d1a565b6001600160a01b039687168152948616602086015260408501939093529084166060840152909216608082015260a081019190915260c001604051809103906000f080158015620004de573d6000803e3d6000fd5b506001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b038481169182179092556000818152600260205260409020805460ff19168417905582549394509089169233927fb09edfcf805674d896a73bdea048a368e58a9ee54fe3e177237ba603ce7572239162000578919062000ebf565b60408051918252602082018b90520160405180910390a495945050505050565b6000546001600160a01b03163314620005f45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200033f565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60006001828154811062000656576200065662000ed9565b6000918252602090912001546001600160a01b031692915050565b6000546001600160a01b03163314620006cd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200033f565b6001600160a01b038116620007255760405162461bcd60e51b815260206004820152601d60248201527f696e76616c69642d666565642d72656769737472792d6164647265737300000060448201526064016200033f565b6003546001600160a01b0382811691161415620007855760405162461bcd60e51b815260206004820152601a60248201527f73616d652d666565642d72656769737472792d6164647265737300000000000060448201526064016200033f565b6003546040516001600160a01b038084169216907f6d1006252b3dd171af76c28c184327bfddc39f439a50e0ac7f418c660b8894b590600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6003546000906001600160a01b031663d2edb6dd620008008562000bdc565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152610348602482015260440160206040518083038186803b1580156200086057600080fd5b505afa92505050801562000893575060408051601f3d908101601f19168201909252620008909181019062000eef565b60015b620009ce576000620008ba8473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee62000c24565b90506000620008e073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61034862000c24565b9050600081620008f986670de0b6b3a764000062000f0f565b62000905919062000f31565b9050856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200094157600080fd5b505afa15801562000956573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200097c919062000f54565b6200098990601262000f79565b6200099690600a6200109c565b83620009ab83670de0b6b3a764000062000f0f565b620009b7919062000f31565b620009c3919062000f31565b935050505062000aa1565b6000620009de8561034862000c24565b9050846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a1a57600080fd5b505afa15801562000a2f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a55919062000f54565b62000a6290601262000f79565b62000a6f90600a6200109c565b8162000a8486670de0b6b3a764000062000f0f565b62000a90919062000f31565b62000a9c919062000f31565b925050505b92915050565b6000546001600160a01b0316331462000b035760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200033f565b6001600160a01b03811662000b815760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016200033f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038181166000908152600460205260408120549091161562000c20576001600160a01b038083166000908152600460205260409020541662000aa1565b5090565b60035460009081906001600160a01b031663bcfd032d62000c458662000bdc565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039182166004820152908616602482015260440160a06040518083038186803b15801562000ca557600080fd5b505afa15801562000cba573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ce09190620010cd565b509193505050506001600160a01b0383166103481462000d01578062000d12565b62000d12816402540be40062001122565b949350505050565b6122b780620011eb83390190565b6001600160a01b038116811462000d3e57600080fd5b50565b6000806040838503121562000d5557600080fd5b823562000d628162000d28565b9150602083013562000d748162000d28565b809150509250929050565b600080600080600060a0868803121562000d9857600080fd5b853562000da58162000d28565b945060208601359350604086013562000dbe8162000d28565b9250606086013562000dd08162000d28565b949793965091946080013592915050565b60006020828403121562000df457600080fd5b813562000e018162000d28565b9392505050565b60006020828403121562000e1b57600080fd5b5035919050565b600060208083528351808285015260005b8181101562000e515785810183015185820160400152820162000e33565b8181111562000e64576000604083870101525b50601f01601f1916929092016040019392505050565b6000806040838503121562000e8e57600080fd5b823562000e9b8162000d28565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008282101562000ed45762000ed462000ea9565b500390565b634e487b7160e01b600052603260045260246000fd5b60006020828403121562000f0257600080fd5b815162000e018162000d28565b600081600019048311821515161562000f2c5762000f2c62000ea9565b500290565b60008262000f4f57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121562000f6757600080fd5b815160ff8116811462000e0157600080fd5b600060ff821660ff84168082101562000f965762000f9662000ea9565b90039392505050565b600181815b8085111562000fe057816000190482111562000fc45762000fc462000ea9565b8085161562000fd257918102915b93841c939080029062000fa4565b509250929050565b60008262000ff95750600162000aa1565b81620010085750600062000aa1565b81600181146200102157600281146200102c576200104c565b600191505062000aa1565b60ff84111562001040576200104062000ea9565b50506001821b62000aa1565b5060208310610133831016604e8410600b841016171562001071575081810a62000aa1565b6200107d838362000f9f565b806000190482111562001094576200109462000ea9565b029392505050565b600062000e0160ff84168362000fe8565b805169ffffffffffffffffffff81168114620010c857600080fd5b919050565b600080600080600060a08688031215620010e657600080fd5b620010f186620010ad565b94506020860151935060408601519250606086015191506200111660808701620010ad565b90509295509295909350565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60008413600084138583048511828216161562001166576200116662000ea9565b7f80000000000000000000000000000000000000000000000000000000000000006000871286820588128184161615620011a457620011a462000ea9565b60008712925087820587128484161615620011c357620011c362000ea9565b87850587128184161615620011dc57620011dc62000ea9565b50505092909302939250505056fe60e06040523480156200001157600080fd5b50604051620022b7380380620022b783398101604081905262000034916200054f565b3360c0819052604080516001621794a360e21b03198152905163ffa1ad7491600480820192600092909190829003018186803b1580156200007457600080fd5b505afa15801562000089573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000b39190810190620005d4565b8051620000c9916001916020909101906200048c565b50428111620001125760405162461bcd60e51b815260206004820152601060248201526f696e76616c69642d656e642d74696d6560801b60448201526064015b60405180910390fd5b816001600160a01b0316856001600160a01b03161415620001765760405162461bcd60e51b815260206004820152601860248201527f70617965652d69732d66756e64696e672d616464726573730000000000000000604482015260640162000109565b6001600160a01b038516158015906200019757506001600160a01b03821615155b620001e55760405162461bcd60e51b815260206004820152601d60248201527f70617965652d6f722d66756e64696e672d616464726573732d69732d30000000604482015260640162000109565b60008411620002295760405162461bcd60e51b815260206004820152600f60248201526e07573642d616d6f756e742d69732d3608c1b604482015260640162000109565b600280546001600160a01b038088166001600160a01b031992831617909255600486905584821660a0526003805485841692169190911790558616608052426005819055620002799082620006b0565b60068190556200028a9085620006d6565b6007819055620002d05760405162461bcd60e51b815260206004820152601060248201526f07573642d7065722d7365632d69732d360841b604482015260640162000109565b6040516430b236b4b760d91b60208201526200030c9060250160405160208183030381529060405280519060200120876200038860201b60201c565b604051677061757361626c6560c01b60208201526200037c90602801604051602081830303815290604052805190602001206040516020016200035a906430b236b4b760d91b815260050190565b604051602081830303815290604052805190602001206200039860201b60201c565b50505050505062000736565b620003948282620003ec565b5050565b600082815260208190526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526020829052604090912060010155565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000394576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620004483390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b8280546200049a90620006f9565b90600052602060002090601f016020900481019282620004be576000855562000509565b82601f10620004d957805160ff191683800117855562000509565b8280016001018555821562000509579182015b8281111562000509578251825591602001919060010190620004ec565b50620005179291506200051b565b5090565b5b808211156200051757600081556001016200051c565b80516001600160a01b03811681146200054a57600080fd5b919050565b60008060008060008060c087890312156200056957600080fd5b620005748762000532565b9550620005846020880162000532565b9450604087015193506200059b6060880162000532565b9250620005ab6080880162000532565b915060a087015190509295509295509295565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215620005e857600080fd5b82516001600160401b03808211156200060057600080fd5b818501915085601f8301126200061557600080fd5b8151818111156200062a576200062a620005be565b604051601f8201601f19908116603f01168101908382118183101715620006555762000655620005be565b8160405282815288868487010111156200066e57600080fd5b600093505b8284101562000692578484018601518185018701529285019262000673565b82841115620006a45760008684830101525b98975050505050505050565b600082821015620006d157634e487b7160e01b600052601160045260246000fd5b500390565b600082620006f457634e487b7160e01b600052601260045260246000fd5b500490565b600181811c908216806200070e57607f821691505b602082108114156200073057634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051611b0b620007ac600039600081816103c901528181610e1d0152610ff301526000818161044c01528181610e4c01528181610fc1015261109c015260008181610233015281816105770152818161075a0152818161090601528181610b320152610c2e0152611b0b6000f3fe608060405234801561001057600080fd5b50600436106101d95760003560e01c8063a217fddf11610104578063d547741f116100a2578063f3ca5edf11610071578063f3ca5edf1461042c578063f6d6d5aa1461043f578063fc0c546a14610447578063ffa1ad741461046e57600080fd5b8063d547741f146103fe578063d9d1bc2714610411578063e834a8341461041a578063f0d909371461042357600080fd5b8063af38d757116100de578063af38d757146103b4578063b87fe774146103bc578063c45a0155146103c4578063d3b7bfb4146103eb57600080fd5b8063a217fddf14610350578063a3f4df7e14610358578063ae90b213146103a157600080fd5b806336568abe1161017c57806361cd014d1161014b57806361cd014d146102ea57806378e97925146102fd57806391d148541461030657806398416f0e1461033d57600080fd5b806336568abe146102ba5780634b7c6617146102cd5780634e71d92d146102d55780635c975abb146102dd57600080fd5b8063123119cd116101b8578063123119cd1461022e57806319f7671b1461026d578063248a9ca3146102845780632f2ff15d146102a757600080fd5b80627adac4146101de57806301ffc9a7146101f357806303b86b551461021b575b600080fd5b6101f16101ec3660046117ee565b610476565b005b610206610201366004611809565b61050b565b60405190151581526020015b60405180910390f35b6101f1610229366004611833565b610574565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610212565b61027660065481565b604051908152602001610212565b610276610292366004611855565b60009081526020819052604090206001015490565b6101f16102b536600461186e565b6106a0565b6101f16102c836600461186e565b6106cb565b6101f1610757565b6101f1610843565b6009546102069060ff1681565b6101f16102f83660046117ee565b610903565b61027660055481565b61020661031436600461186e565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6101f161034b3660046117ee565b610ae9565b610276600081565b6103946040518060400160405280600d81526020017f5061796d656e7453747265616d0000000000000000000000000000000000000081525081565b60405161021291906118c6565b600254610255906001600160a01b031681565b610276610b20565b6101f1610b2f565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b600354610255906001600160a01b031681565b6101f161040c36600461186e565b610c05565b61027660075481565b61027660085481565b61027660045481565b6101f161043a3660046117ee565b610c2b565b610276610e19565b6102557f000000000000000000000000000000000000000000000000000000000000000081565b610394610eef565b6001600160a01b0381166104d15760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642d64656c65676174650000000000000000000000000000000060448201526064015b60405180910390fd5b604051677061757361626c6560c01b60208201526105089060280160405160208183030381529060405280519060200120826106a0565b50565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061056e57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146105df5760405162461bcd60e51b815260206004820152601060248201526f3737ba16b9ba3932b0b696b7bbb732b960811b60448201526064016104c8565b42811161062e5760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642d656e642d74696d650000000000000000000000000000000060448201526064016104c8565b610636610f7d565b600482905542600581905561064b908261190f565b600681905561065a9083611926565b600755600060085560408051838152602081018390527f11f23cf1c7a2a194f2b700a80fe1987bf966eb2f8176a0ecf94eec6eb22f408f91015b60405180910390a15050565b6000828152602081905260409020600101546106bc81336110ff565b6106c6838361117d565b505050565b6001600160a01b03811633146107495760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016104c8565b610753828261121b565b5050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614806107c25750604051677061757361626c6560c01b60208201526107c2906028015b604051602081830303815290604052805190602001206103143390565b61080e5760405162461bcd60e51b815260206004820152601d60248201527f6e6f742d73747265616d2d6f776e65722d6f722d64656c65676174656400000060448201526064016104c8565b6009805460ff191690556040517f27196296b54785165ca5e02d8431ca24e4910ce25b0add3fce74aa38927b34a390600090a1565b6002546001600160a01b0316336001600160a01b0316146108a65760405162461bcd60e51b815260206004820152600960248201527f6e6f742d7061796565000000000000000000000000000000000000000000000060448201526064016104c8565b60095460ff16156108f95760405162461bcd60e51b815260206004820152601060248201527f73747265616d2d69732d7061757365640000000000000000000000000000000060448201526064016104c8565b610901610f7d565b565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461096e5760405162461bcd60e51b815260206004820152601060248201526f3737ba16b9ba3932b0b696b7bbb732b960811b60448201526064016104c8565b6001600160a01b0381166109c45760405162461bcd60e51b815260206004820152601b60248201527f696e76616c69642d6e65772d66756e64696e672d61646472657373000000000060448201526064016104c8565b6003546001600160a01b0382811691161415610a225760405162461bcd60e51b815260206004820152601860248201527f73616d652d6e65772d66756e64696e672d61646472657373000000000000000060448201526064016104c8565b6002546001600160a01b0382811691161415610a805760405162461bcd60e51b815260206004820152601c60248201527f6e65772d66756e64696e672d616464726573732d69732d70617965650000000060448201526064016104c8565b6003546040516001600160a01b038084169216907f45c1138f56e2e3f78c7e80b5c395a6510bbaba05d80c4d66e947c301c9d388f090600090a36003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b604051677061757361626c6560c01b6020820152610508906028016040516020818303038152906040528051906020012082610c05565b6000610b2a61129a565b905090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480610b815750604051677061757361626c6560c01b6020820152610b81906028016107a5565b610bcd5760405162461bcd60e51b815260206004820152601d60248201527f6e6f742d73747265616d2d6f776e65722d6f722d64656c65676174656400000060448201526064016104c8565b6009805460ff191660011790556040517f8b7fc2110b35688b78e16841494350c1b3329185624cea4b50e59fc2e544a7f890600090a1565b600082815260208190526040902060010154610c2181336110ff565b6106c6838361121b565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610c965760405162461bcd60e51b815260206004820152601060248201526f3737ba16b9ba3932b0b696b7bbb732b960811b60448201526064016104c8565b6001600160a01b038116610cec5760405162461bcd60e51b815260206004820152601160248201527f696e76616c69642d6e65772d706179656500000000000000000000000000000060448201526064016104c8565b6002546001600160a01b0382811691161415610d4a5760405162461bcd60e51b815260206004820152600e60248201527f73616d652d6e65772d706179656500000000000000000000000000000000000060448201526064016104c8565b6003546001600160a01b0382811691161415610da85760405162461bcd60e51b815260206004820152601c60248201527f6e65772d70617965652d69732d66756e64696e672d616464726573730000000060448201526064016104c8565b610db0610f7d565b6002546040516001600160a01b038084169216907fa9e5978bbfbf156599d86b750e4db433bc414c83e3ee93cae447582d6d42990b90600090a36002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b2211d5c7f0000000000000000000000000000000000000000000000000000000000000000610e7361129a565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610eb757600080fd5b505afa158015610ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a9190611948565b60018054610efc90611961565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2890611961565b8015610f755780601f10610f4a57610100808354040283529160200191610f75565b820191906000526020600020905b815481529060010190602001808311610f5857829003601f168201915b505050505081565b6000610f8761129a565b905080610f915750565b6040517fb2211d5c0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390526000917f00000000000000000000000000000000000000000000000000000000000000009091169063b2211d5c9060440160206040518083038186803b15801561103757600080fd5b505afa15801561104b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106f9190611948565b90508160086000828254611083919061199c565b90915550506003546002546110c9916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929181169116846112e8565b60408051838152602081018390527fc83b5086ce94ec8d5a88a9f5fea4b18a522bb238ed0d2d8abd959549a80c16b89101610694565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166107535761113b816001600160a01b03166014611376565b611146836020611376565b6040516020016111579291906119b4565b60408051601f198184030181529082905262461bcd60e51b82526104c8916004016118c6565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610753576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556111d73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610753576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080600554426112ab919061190f565b90506006548111156112cd576008546004546112c7919061190f565b91505090565b600854816007546112de9190611a35565b6112c7919061190f565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261137090859061155e565b50505050565b60606000611385836002611a35565b61139090600261199c565b67ffffffffffffffff8111156113a8576113a8611a54565b6040519080825280601f01601f1916602001820160405280156113d2576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061140957611409611a6a565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061145457611454611a6a565b60200101906001600160f81b031916908160001a9053506000611478846002611a35565b61148390600161199c565b90505b6001811115611508577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106114c4576114c4611a6a565b1a60f81b8282815181106114da576114da611a6a565b60200101906001600160f81b031916908160001a90535060049490941c9361150181611a80565b9050611486565b5083156115575760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104c8565b9392505050565b60006115b3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116439092919063ffffffff16565b8051909150156106c657808060200190518101906115d19190611a97565b6106c65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104c8565b6060611652848460008561165a565b949350505050565b6060824710156116d25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104c8565b843b6117205760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104c8565b600080866001600160a01b0316858760405161173c9190611ab9565b60006040518083038185875af1925050503d8060008114611779576040519150601f19603f3d011682016040523d82523d6000602084013e61177e565b606091505b509150915061178e828286611799565b979650505050505050565b606083156117a8575081611557565b8251156117b85782518084602001fd5b8160405162461bcd60e51b81526004016104c891906118c6565b80356001600160a01b03811681146117e957600080fd5b919050565b60006020828403121561180057600080fd5b611557826117d2565b60006020828403121561181b57600080fd5b81356001600160e01b03198116811461155757600080fd5b6000806040838503121561184657600080fd5b50508035926020909101359150565b60006020828403121561186757600080fd5b5035919050565b6000806040838503121561188157600080fd5b82359150611891602084016117d2565b90509250929050565b60005b838110156118b557818101518382015260200161189d565b838111156113705750506000910152565b60208152600082518060208401526118e581604085016020870161189a565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b600082821015611921576119216118f9565b500390565b60008261194357634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561195a57600080fd5b5051919050565b600181811c9082168061197557607f821691505b6020821081141561199657634e487b7160e01b600052602260045260246000fd5b50919050565b600082198211156119af576119af6118f9565b500190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516119ec81601785016020880161189a565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611a2981602884016020880161189a565b01602801949350505050565b6000816000190483118215151615611a4f57611a4f6118f9565b500290565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081611a8f57611a8f6118f9565b506000190190565b600060208284031215611aa957600080fd5b8151801515811461155757600080fd5b60008251611acb81846020870161189a565b919091019291505056fea2646970667358221220d8cc08265955021cde2be308ec70395958917703ece9833b69027c077a047e0d64736f6c63430008090033a2646970667358221220d7b0de33f42ad39b66511188fdd4314152fbad707bb6faf20e7fc4f65193461864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createStream(address,uint256,address,address,uint256)": {
        "details": "Payer (_msgSender()) is set as admin of \"pausableRole\", so he can grant and revoke the \"pausable\" role later on",
        "params": {
          "_endTime": "timestamp that sets drip distribution end",
          "_fundingAddress": "address used to withdraw the drip",
          "_payee": "address that receives the payment stream",
          "_token": "address of the ERC20 token that payee receives as payment",
          "_usdAmount": "uint256 total amount in USD (scaled to 18 decimals) to be distributed until endTime"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCustomFeedMapping(address,address)": {
        "params": {
          "_denomination": "the denomination address that the feed registry uses for _token",
          "_token": "address of the ERC20 token"
        }
      },
      "updateFeedRegistry(address)": {
        "details": "Only contract owner can change feedRegistry",
        "params": {
          "_newAddress": "address of new Chainlink FeedRegistry instance"
        }
      },
      "usdToTokenAmount(address,uint256)": {
        "params": {
          "_amount": "amount in USD (scaled to 18 decimals)",
          "_token": "address of target token"
        },
        "returns": {
          "lastPrice": "target token amount"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createStream(address,uint256,address,address,uint256)": {
        "notice": "Creates a new payment stream"
      },
      "getStream(uint256)": {
        "notice": "Returns address of the stream located at given id"
      },
      "getStreamsCount()": {
        "notice": "Returns no. of streams stored in contract"
      },
      "ours(address)": {
        "notice": "Checks if a address belongs to this contract' streams"
      },
      "updateCustomFeedMapping(address,address)": {
        "notice": "Defines a custom mapping for token denominations in the Feed Registry"
      },
      "updateFeedRegistry(address)": {
        "notice": "Updates Chainlink FeedRegistry contract address"
      },
      "usdToTokenAmount(address,uint256)": {
        "notice": "Converts given amount in usd to target token amount using oracle"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 906,
        "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2993,
        "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
        "label": "allStreams",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2997,
        "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
        "label": "isOurs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3000,
        "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
        "label": "feedRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(FeedRegistryInterface)530"
      },
      {
        "astId": 3004,
        "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
        "label": "customFeedMapping",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(FeedRegistryInterface)530": {
        "encoding": "inplace",
        "label": "contract FeedRegistryInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}