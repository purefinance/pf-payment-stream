{
  "address": "0x41f0Ba2E30E17c47036F5E78DaF99c01243ecD1f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stream",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdAmount",
          "type": "uint256"
        }
      ],
      "name": "StreamCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "SwapManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_dex",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_usdAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fundingAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "createStream",
      "outputs": [
        {
          "internalType": "address",
          "name": "streamAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getStream",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStreamsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_a",
          "type": "address"
        }
      ],
      "name": "ours",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "updateOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "usdToTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7af88e1dd8fa7f7e0273465beadb3f8bc997a55b8eae9914a8ca0e79f7cd112",
  "receipt": {
    "to": null,
    "from": "0x901a826F1254eD1D09295b938a6189e36Efa9c33",
    "contractAddress": "0x41f0Ba2E30E17c47036F5E78DaF99c01243ecD1f",
    "transactionIndex": 129,
    "gasUsed": "2986301",
    "logsBloom": "0x
    "blockHash": "0xf9e2746ec885761935972a6a575320afad223749e4849ce584da587ff9930a54",
    "transactionHash": "0xa7af88e1dd8fa7f7e0273465beadb3f8bc997a55b8eae9914a8ca0e79f7cd112",
    "logs": [
      {
        "transactionIndex": 129,
        "blockNumber": 13413233,
        "transactionHash": "0xa7af88e1dd8fa7f7e0273465beadb3f8bc997a55b8eae9914a8ca0e79f7cd112",
        "address": "0x41f0Ba2E30E17c47036F5E78DaF99c01243ecD1f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000901a826f1254ed1d09295b938a6189e36efa9c33"
        ],
        "data": "0x",
        "logIndex": 194,
        "blockHash": "0xf9e2746ec885761935972a6a575320afad223749e4849ce584da587ff9930a54"
      }
    ],
    "blockNumber": 13413233,
    "cumulativeGasUsed": "12708964",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe382d9f2394A359B01006faa8A1864b8a60d2710"
  ],
  "solcInputHash": "529dd6ad7eec5c62ef51900b4c9c3ac9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stream\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"StreamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"SwapManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_dex\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStreamsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"ours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"updateOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"usdToTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addToken(address,uint8,address[])\":{\"params\":{\"_dex\":\"ID for choosing the DEX where prices will be retrieved (0 = Uniswap v2, 1 = Sushiswap)\",\"_path\":\"path of tokens to reach a _tokenAddress from a USD stablecoin (e.g: [ USDC, WETH, VSP ])\",\"_tokenAddress\":\"address of the ERC20 token to add support to\"}},\"createStream(address,uint256,address,address,uint256)\":{\"details\":\"Payer (_msgSender()) is set as admin of \\\"pausableRole\\\", so he can grant and revoke the \\\"pausable\\\" role later on\",\"params\":{\"_endTime\":\"timestamp that sets drip distribution end\",\"_fundingAddress\":\"address used to withdraw the drip\",\"_payee\":\"address that receives the payment stream\",\"_token\":\"address of the ERC20 token that payee receives as payment\",\"_usdAmount\":\"uint256 total amount in USD (scaled to 18 decimals) to be distributed until endTime\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateOracles(address)\":{\"params\":{\"_token\":\"address of target token\"}},\"updateSwapManager(address)\":{\"details\":\"Only contract owner can change swapManager\",\"params\":{\"_newAddress\":\"address of new Swap Manager instance\"}},\"usdToTokenAmount(address,uint256)\":{\"params\":{\"_amount\":\"amount in USD (scaled to 18 decimals)\",\"_token\":\"address of target token\"},\"returns\":{\"lastPrice\":\"target token amount\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addToken(address,uint8,address[])\":{\"notice\":\"If caller is contract owner it adds (or updates) Oracle price feed for given token\"},\"createStream(address,uint256,address,address,uint256)\":{\"notice\":\"Creates a new payment stream\"},\"getStream(uint256)\":{\"notice\":\"Returns address of the stream located at given id\"},\"getStreamsCount()\":{\"notice\":\"Returns no. of streams stored in contract\"},\"ours(address)\":{\"notice\":\"Checks if a address belongs to this contract' streams\"},\"updateOracles(address)\":{\"notice\":\"Updates price oracles for a given token\"},\"updateSwapManager(address)\":{\"notice\":\"Updates Swap Manager contract address\"},\"usdToTokenAmount(address,uint256)\":{\"notice\":\"Converts given amount in usd to target token amount using oracle\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PaymentStreamFactory.sol\":\"PaymentStreamFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/PaymentStream.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IPaymentStream.sol\\\";\\nimport \\\"./interfaces/IPaymentStreamFactory.sol\\\";\\n\\ncontract PaymentStream is AccessControl, IPaymentStream {\\n  using SafeERC20 for IERC20;\\n\\n  address public payer;\\n  address public payee;\\n  address public token;\\n  address public fundingAddress;\\n\\n  uint256 public usdAmount;\\n  uint256 public startTime;\\n  uint256 public secs;\\n  uint256 public usdPerSec;\\n  uint256 public claimed;\\n\\n  bool public paused;\\n\\n  IPaymentStreamFactory public immutable factory;\\n\\n  bytes32 private constant ADMIN_ROLE = keccak256(abi.encodePacked(\\\"admin\\\"));\\n  bytes32 private constant PAUSABLE_ROLE =\\n    keccak256(abi.encodePacked(\\\"pausable\\\"));\\n\\n  modifier onlyPayer() {\\n    require(_msgSender() == payer, \\\"not-stream-owner\\\");\\n    _;\\n  }\\n\\n  modifier onlyPayerOrDelegated() {\\n    require(\\n      _msgSender() == payer || hasRole(PAUSABLE_ROLE, _msgSender()),\\n      \\\"not-stream-owner-or-delegated\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyPayee() {\\n    require(_msgSender() == payee, \\\"not-payee\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Creates a new payment stream\\n   * @dev Payer is set as admin of \\\"PAUSABLE_ROLE\\\", so he can grant and revoke the \\\"pausable\\\" role later on\\n   * @param _payer Owner of the stream\\n   * @param _payee address that receives the payment stream\\n   * @param _usdAmount uint256 total amount in USD (scaled to 18 decimals) to be distributed until endTime\\n   * @param _token address of the ERC20 token that payee receives as payment\\n   * @param _fundingAddress address used to withdraw the drip\\n   * @param _endTime timestamp that sets drip distribution end\\n   */\\n  constructor(\\n    address _payer,\\n    address _payee,\\n    uint256 _usdAmount,\\n    address _token,\\n    address _fundingAddress,\\n    uint256 _endTime\\n  ) {\\n    factory = IPaymentStreamFactory(_msgSender());\\n\\n    require(_endTime > block.timestamp, \\\"invalid-end-time\\\");\\n    require(_payee != _fundingAddress, \\\"payee-is-funding-address\\\");\\n    require(\\n      _payee != address(0) && _fundingAddress != address(0),\\n      \\\"payee-or-funding-address-is-0\\\"\\n    );\\n\\n    require(_usdAmount > 0, \\\"usd-amount-is-0\\\");\\n\\n    payee = _payee;\\n    usdAmount = _usdAmount;\\n    token = _token;\\n    fundingAddress = _fundingAddress;\\n    payer = _payer;\\n    startTime = block.timestamp;\\n    secs = _endTime - block.timestamp;\\n    usdPerSec = _usdAmount / secs;\\n\\n    _setupRole(ADMIN_ROLE, _payer);\\n    _setRoleAdmin(PAUSABLE_ROLE, ADMIN_ROLE);\\n  }\\n\\n  /**\\n   * @notice Delegates pausable capability to new delegate\\n   * @dev Only RoleAdmin (Payer) can delegate this capability, tx will revert otherwise\\n   * @param _delegate address that receives the \\\"PAUSABLE_ROLE\\\"\\n   */\\n  function delegatePausable(address _delegate) external override {\\n    require(_delegate != address(0), \\\"invalid-delegate\\\");\\n\\n    grantRole(PAUSABLE_ROLE, _delegate);\\n  }\\n\\n  /**\\n   * @notice Revokes pausable capability of a delegate\\n   * @dev Only RoleAdmin (Payer) can revoke this capability, tx will revert otherwise\\n   * @param _delegate address that has its \\\"PAUSABLE_ROLE\\\" revoked\\n   */\\n  function revokePausable(address _delegate) external override {\\n    revokeRole(PAUSABLE_ROLE, _delegate);\\n  }\\n\\n  /**\\n   * @notice Pauses a stream if caller is either the payer or a delegate of PAUSABLE_ROLE\\n   */\\n  function pauseStream() external override onlyPayerOrDelegated {\\n    paused = true;\\n    emit StreamPaused();\\n  }\\n\\n  /**\\n   * @notice Unpauses a stream if caller is either the payer or a delegate of PAUSABLE_ROLE\\n   */\\n  function unpauseStream() external override onlyPayerOrDelegated {\\n    paused = false;\\n    emit StreamUnpaused();\\n  }\\n\\n  /**\\n   * @notice If caller is the payer of the stream it sets a new address as receiver of the stream\\n   * @param _newPayee address of new payee\\n   */\\n  function updatePayee(address _newPayee) external override onlyPayer {\\n    require(_newPayee != address(0), \\\"invalid-new-payee\\\");\\n    require(_newPayee != payee, \\\"same-new-payee\\\");\\n\\n    _claim();\\n\\n    emit PayeeUpdated(payee, _newPayee);\\n    payee = _newPayee;\\n  }\\n\\n  /**\\n   * @notice If caller is the payer of the stream it sets a new address used to withdraw the drip\\n   * @param _newFundingAddress new address used to withdraw the drip\\n   */\\n  function updateFundingAddress(address _newFundingAddress)\\n    external\\n    override\\n    onlyPayer\\n  {\\n    require(_newFundingAddress != address(0), \\\"invalid-new-funding-address\\\");\\n    require(_newFundingAddress != fundingAddress, \\\"same-new-funding-address\\\");\\n\\n    emit FundingAddressUpdated(fundingAddress, _newFundingAddress);\\n\\n    fundingAddress = _newFundingAddress;\\n  }\\n\\n  /**\\n   * @notice If caller is the payer it increases or decreases a stream funding rate\\n   * @dev Any unclaimed drip amount remaining will be claimed on behalf of payee\\n   * @param _usdAmount uint256 total amount in USD (scaled to 18 decimals) to be distributed until endTime\\n   * @param _endTime timestamp that sets drip distribution end\\n   */\\n  function updateFundingRate(uint256 _usdAmount, uint256 _endTime)\\n    external\\n    override\\n    onlyPayer\\n  {\\n    require(_endTime > block.timestamp, \\\"invalid-end-time\\\");\\n\\n    _claim();\\n\\n    usdAmount = _usdAmount;\\n    startTime = block.timestamp;\\n    secs = _endTime - block.timestamp;\\n    usdPerSec = _usdAmount / secs;\\n    claimed = 0;\\n\\n    emit StreamUpdated(_usdAmount, _endTime);\\n  }\\n\\n  /**\\n   * @notice If caller is the payee of the stream it receives the accrued drip amount\\n   */\\n  function claim() external override onlyPayee {\\n    require(!paused, \\\"stream-is-paused\\\");\\n    _claim();\\n  }\\n\\n  function claimable() external view override returns (uint256) {\\n    return _claimable();\\n  }\\n\\n  /**\\n   * @notice Helper function, gets the accrued drip of given stream converted into target token amount\\n   * @return uint256 amount in target token\\n   */\\n  function claimableToken() external view override returns (uint256) {\\n    return factory.usdToTokenAmount(token, _claimable());\\n  }\\n\\n  function _claim() internal {\\n    factory.updateOracles(token);\\n\\n    uint256 _accumulated = _claimable();\\n\\n    if (_accumulated == 0) return;\\n\\n    uint256 _amount = factory.usdToTokenAmount(token, _accumulated);\\n\\n    // if we get _amount = 0 it means payee called this function\\n    // before the oracles had time to update for the first time\\n    require(_amount > 0, \\\"oracle-update-error\\\");\\n\\n    claimed += _accumulated;\\n\\n    IERC20(token).safeTransferFrom(fundingAddress, payee, _amount);\\n\\n    emit Claimed(_accumulated, _amount);\\n  }\\n\\n  /**\\n   * @notice gets the accrued drip of given stream in USD\\n   * @return uint256 USD amount (scaled to 18 decimals)\\n   */\\n  function _claimable() internal view returns (uint256) {\\n    uint256 _elapsed = block.timestamp - startTime;\\n\\n    if (_elapsed > secs) {\\n      return usdAmount - claimed; // no more drips to avoid floating point dust\\n    }\\n\\n    return (usdPerSec * _elapsed) - claimed;\\n  }\\n}\\n\",\"keccak256\":\"0x4c6ae32fe2415151007e2a72533fe18233d4a4d2ceef29c949b126289a901b72\",\"license\":\"MIT\"},\"contracts/PaymentStreamFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IPaymentStreamFactory.sol\\\";\\nimport \\\"./interfaces/ISwapManager.sol\\\";\\nimport \\\"./PaymentStream.sol\\\";\\n\\ncontract PaymentStreamFactory is IPaymentStreamFactory, Ownable {\\n  address[] private allStreams;\\n  mapping(address => bool) private isOurs;\\n\\n  uint256 private constant TWAP_PERIOD = 1 hours;\\n\\n  uint8 private constant MAX_PATH = 5;\\n\\n  ISwapManager public swapManager;\\n\\n  mapping(address => TokenSupport) public supportedTokens; // token address => TokenSupport\\n\\n  constructor(address _swapManager) {\\n    swapManager = ISwapManager(_swapManager);\\n  }\\n\\n  /**\\n   * @notice Creates a new payment stream\\n   * @dev Payer (_msgSender()) is set as admin of \\\"pausableRole\\\", so he can grant and revoke the \\\"pausable\\\" role later on\\n   * @param _payee address that receives the payment stream\\n   * @param _usdAmount uint256 total amount in USD (scaled to 18 decimals) to be distributed until endTime\\n   * @param _token address of the ERC20 token that payee receives as payment\\n   * @param _fundingAddress address used to withdraw the drip\\n   * @param _endTime timestamp that sets drip distribution end\\n   */\\n  function createStream(\\n    address _payee,\\n    uint256 _usdAmount,\\n    address _token,\\n    address _fundingAddress,\\n    uint256 _endTime\\n  ) external returns (address streamAddress) {\\n    require(supportedTokens[_token].path.length > 1, \\\"token-not-supported\\\");\\n\\n    streamAddress = address(\\n      new PaymentStream(\\n        _msgSender(),\\n        _payee,\\n        _usdAmount,\\n        _token,\\n        _fundingAddress,\\n        _endTime\\n      )\\n    );\\n\\n    allStreams.push(streamAddress);\\n    isOurs[streamAddress] = true;\\n\\n    emit StreamCreated(\\n      allStreams.length - 1,\\n      streamAddress,\\n      _msgSender(),\\n      _payee,\\n      _usdAmount\\n    );\\n  }\\n\\n  /**\\n   * @notice Updates Swap Manager contract address\\n   * @dev Only contract owner can change swapManager\\n   * @param _newAddress address of new Swap Manager instance\\n   */\\n  function updateSwapManager(address _newAddress) external override onlyOwner {\\n    require(_newAddress != address(0), \\\"invalid-swap-manager-address\\\");\\n    require(_newAddress != address(swapManager), \\\"same-swap-manager-address\\\");\\n\\n    emit SwapManagerUpdated(address(swapManager), _newAddress);\\n    swapManager = ISwapManager(_newAddress);\\n  }\\n\\n  /**\\n   * @notice If caller is contract owner it adds (or updates) Oracle price feed for given token\\n   * @param _tokenAddress address of the ERC20 token to add support to\\n   * @param _dex ID for choosing the DEX where prices will be retrieved (0 = Uniswap v2, 1 = Sushiswap)\\n   * @param _path path of tokens to reach a _tokenAddress from a USD stablecoin (e.g: [ USDC, WETH, VSP ])\\n   */\\n  function addToken(\\n    address _tokenAddress,\\n    uint8 _dex,\\n    address[] memory _path\\n  ) external override onlyOwner {\\n    TokenSupport memory _tokenSupport;\\n\\n    uint256 _len = _path.length;\\n\\n    require(_len > 1 && _len <= MAX_PATH, \\\"invalid-path-length\\\");\\n\\n    _len--;\\n\\n    for (uint256 i = 0; i < _len; i++) {\\n      swapManager.createOrUpdateOracle(\\n        _path[i],\\n        _path[i + 1],\\n        TWAP_PERIOD,\\n        _dex\\n      );\\n    }\\n\\n    _tokenSupport.path = _path;\\n    _tokenSupport.dex = _dex;\\n\\n    supportedTokens[_tokenAddress] = _tokenSupport;\\n\\n    emit TokenAdded(_tokenAddress);\\n  }\\n\\n  /**\\n   * @notice Converts given amount in usd to target token amount using oracle\\n   * @param _token address of target token\\n   * @param _amount amount in USD (scaled to 18 decimals)\\n   * @return lastPrice target token amount\\n   */\\n  function usdToTokenAmount(address _token, uint256 _amount)\\n    external\\n    view\\n    override\\n    returns (uint256 lastPrice)\\n  {\\n    TokenSupport memory _tokenSupport = supportedTokens[_token];\\n\\n    // _amount is 18 decimals\\n    // some stablecoins like USDC has 6 decimals, so we scale the amount accordingly\\n\\n    _amount =\\n      _amount /\\n      10**(18 - IERC20Metadata(_tokenSupport.path[0]).decimals());\\n    uint256 _len = _tokenSupport.path.length - 1;\\n\\n    for (uint256 i = 0; i < _len; i++) {\\n      (uint256 amountOut, ) =\\n        swapManager.consultForFree(\\n          _tokenSupport.path[i],\\n          _tokenSupport.path[i + 1],\\n          (i == 0) ? _amount : lastPrice,\\n          TWAP_PERIOD,\\n          _tokenSupport.dex\\n        );\\n      lastPrice = amountOut;\\n    }\\n  }\\n\\n  /**\\n   * @notice Updates price oracles for a given token\\n   * @param _token address of target token\\n   */\\n  function updateOracles(address _token) external override {\\n    TokenSupport memory _tokenSupport = supportedTokens[_token];\\n\\n    uint256 _len = _tokenSupport.path.length - 1;\\n\\n    address[] memory _oracles = new address[](_len);\\n\\n    for (uint256 i = 0; i < _len; i++) {\\n      _oracles[i] = swapManager.getOracle(\\n        _tokenSupport.path[i],\\n        _tokenSupport.path[i + 1],\\n        TWAP_PERIOD,\\n        _tokenSupport.dex\\n      );\\n    }\\n\\n    swapManager.updateOracles(_oracles);\\n  }\\n\\n  /**\\n   * @notice Checks if a address belongs to this contract' streams\\n   */\\n  function ours(address _a) external view override returns (bool) {\\n    return isOurs[_a];\\n  }\\n\\n  /**\\n   * @notice Returns no. of streams stored in contract\\n   */\\n  function getStreamsCount() external view override returns (uint256) {\\n    return allStreams.length;\\n  }\\n\\n  /**\\n   * @notice Returns address of the stream located at given id\\n   */\\n  function getStream(uint256 _idx) external view override returns (address) {\\n    require(_idx < allStreams.length, \\\"index-exceeds-list-length\\\");\\n    return allStreams[_idx];\\n  }\\n}\\n\",\"keccak256\":\"0x7513bfc66e97b421ff454b703e78723a0503f19077b6fe25596e92d83d4035fc\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentStream.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\ninterface IPaymentStream {\\n  event Claimed(uint256 usdAmount, uint256 tokenAmount);\\n  event StreamPaused();\\n  event StreamUnpaused();\\n  event StreamUpdated(uint256 usdAmount, uint256 endTime);\\n\\n  event FundingAddressUpdated(\\n    address indexed previousFundingAddress,\\n    address indexed newFundingAddress\\n  );\\n  event PayeeUpdated(address indexed previousPayee, address indexed newPayee);\\n\\n  function claim() external;\\n\\n  function pauseStream() external;\\n\\n  function unpauseStream() external;\\n\\n  function delegatePausable(address delegate) external;\\n\\n  function revokePausable(address delegate) external;\\n\\n  function updateFundingRate(uint256 usdAmount, uint256 endTime) external;\\n\\n  function updateFundingAddress(address newFundingAddress) external;\\n\\n  function updatePayee(address newPayee) external;\\n\\n  function claimableToken() external view returns (uint256);\\n\\n  function claimable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0c8f8ea6bca1d08d1fe5c696d532e0f36992ce32f73e0a3f768cf52adedadee1\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentStreamFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\ninterface IPaymentStreamFactory {\\n  struct TokenSupport {\\n    address[] path;\\n    uint256 dex;\\n  }\\n\\n  event StreamCreated(\\n    uint256 id,\\n    address indexed stream,\\n    address indexed payer,\\n    address indexed payee,\\n    uint256 usdAmount\\n  );\\n\\n  event TokenAdded(address indexed tokenAddress);\\n\\n  event SwapManagerUpdated(\\n    address indexed previousSwapManager,\\n    address indexed newSwapManager\\n  );\\n\\n  function updateSwapManager(address newAddress) external;\\n\\n  function addToken(\\n    address _tokenAddress,\\n    uint8 _dex,\\n    address[] memory _path\\n  ) external;\\n\\n  function updateOracles(address token) external;\\n\\n  function usdToTokenAmount(address _token, uint256 _amount)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function ours(address _a) external view returns (bool);\\n\\n  function getStreamsCount() external view returns (uint256);\\n\\n  function getStream(uint256 _idx) external view returns (address);\\n}\\n\",\"keccak256\":\"0xb13cd057453524f25a1d286b258fd9db6e55e647a435a35ce7ba026f19b228d6\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\n/* solhint-disable func-name-mixedcase */\\n\\ninterface ISwapManager {\\n  event OracleCreated(\\n    address indexed _sender,\\n    address indexed _newOracle,\\n    uint256 _period\\n  );\\n\\n  function N_DEX() external view returns (uint256);\\n\\n  function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n  function bestOutputFixedInput(\\n    address _from,\\n    address _to,\\n    uint256 _amountIn\\n  )\\n    external\\n    view\\n    returns (\\n      address[] memory path,\\n      uint256 amountOut,\\n      uint256 rIdx\\n    );\\n\\n  function bestPathFixedInput(\\n    address _from,\\n    address _to,\\n    uint256 _amountIn,\\n    uint256 _i\\n  ) external view returns (address[] memory path, uint256 amountOut);\\n\\n  function bestInputFixedOutput(\\n    address _from,\\n    address _to,\\n    uint256 _amountOut\\n  )\\n    external\\n    view\\n    returns (\\n      address[] memory path,\\n      uint256 amountIn,\\n      uint256 rIdx\\n    );\\n\\n  function bestPathFixedOutput(\\n    address _from,\\n    address _to,\\n    uint256 _amountOut,\\n    uint256 _i\\n  ) external view returns (address[] memory path, uint256 amountIn);\\n\\n  function safeGetAmountsOut(\\n    uint256 _amountIn,\\n    address[] memory _path,\\n    uint256 _i\\n  ) external view returns (uint256[] memory result);\\n\\n  function unsafeGetAmountsOut(\\n    uint256 _amountIn,\\n    address[] memory _path,\\n    uint256 _i\\n  ) external view returns (uint256[] memory result);\\n\\n  function safeGetAmountsIn(\\n    uint256 _amountOut,\\n    address[] memory _path,\\n    uint256 _i\\n  ) external view returns (uint256[] memory result);\\n\\n  function unsafeGetAmountsIn(\\n    uint256 _amountOut,\\n    address[] memory _path,\\n    uint256 _i\\n  ) external view returns (uint256[] memory result);\\n\\n  function comparePathsFixedInput(\\n    address[] memory pathA,\\n    address[] memory pathB,\\n    uint256 _amountIn,\\n    uint256 _i\\n  ) external view returns (address[] memory path, uint256 amountOut);\\n\\n  function comparePathsFixedOutput(\\n    address[] memory pathA,\\n    address[] memory pathB,\\n    uint256 _amountOut,\\n    uint256 _i\\n  ) external view returns (address[] memory path, uint256 amountIn);\\n\\n  function ours(address a) external view returns (bool);\\n\\n  function oracleCount() external view returns (uint256);\\n\\n  function oracleAt(uint256 idx) external view returns (address);\\n\\n  function getOracle(\\n    address _tokenA,\\n    address _tokenB,\\n    uint256 _period,\\n    uint256 _i\\n  ) external view returns (address);\\n\\n  function createOrUpdateOracle(\\n    address _tokenA,\\n    address _tokenB,\\n    uint256 _period,\\n    uint256 _i\\n  ) external returns (address oracleAddr);\\n\\n  function consultForFree(\\n    address _from,\\n    address _to,\\n    uint256 _amountIn,\\n    uint256 _period,\\n    uint256 _i\\n  ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n  /// get the data we want and pay the gas to update\\n  function consult(\\n    address _from,\\n    address _to,\\n    uint256 _amountIn,\\n    uint256 _period,\\n    uint256 _i\\n  )\\n    external\\n    returns (\\n      uint256 amountOut,\\n      uint256 lastUpdatedAt,\\n      bool updated\\n    );\\n\\n  function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n  function updateOracles(address[] memory _oracleAddrs)\\n    external\\n    returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0x95668f1a2e149439a55f687338ce0334f8054049c38b305ad3f14b5562e54b87\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161353438038061353483398101604081905261002f91610095565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600380546001600160a01b0319166001600160a01b03929092169190911790556100c3565b6000602082840312156100a6578081fd5b81516001600160a01b03811681146100bc578182fd5b9392505050565b613462806100d26000396000f3fe60806040523480156200001157600080fd5b5060043610620000f45760003560e01c8063894e9a0d1162000099578063c61f28de116200006f578063c61f28de1462000201578063e335e79a1462000218578063f08ad9d81462000221578063f2fde38b146200023857620000f4565b8063894e9a0d14620001c15780638da5cb5b14620001d8578063b2211d5c14620001ea57620000f4565b8063709d039d11620000cf578063709d039d146200017b578063715018a6146200018f57806381cc3ba4146200019957620000f4565b80634c36fad714620000f95780635ccc5735146200011257806368c4ac261462000146575b600080fd5b620001106200010a3660046200114d565b6200024f565b005b6200012962000123366004620011c0565b620003c3565b6040516001600160a01b0390911681526020015b60405180910390f35b6200016c620001573660046200114d565b60046020526000908152604090206001015481565b6040519081526020016200013d565b60035462000129906001600160a01b031681565b620001106200056d565b620001b0620001aa3660046200114d565b62000613565b60405190151581526020016200013d565b62000129620001d236600462001321565b62000635565b6000546001600160a01b031662000129565b6200016c620001fb36600462001192565b620006c8565b620001106200021236600462001221565b620009a2565b6001546200016c565b62000110620002323660046200114d565b62000c54565b62000110620002493660046200114d565b62000f7c565b6000546001600160a01b03163314620002af5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620003075760405162461bcd60e51b815260206004820152601c60248201527f696e76616c69642d737761702d6d616e616765722d61646472657373000000006044820152606401620002a6565b6003546001600160a01b0382811691161415620003675760405162461bcd60e51b815260206004820152601960248201527f73616d652d737761702d6d616e616765722d61646472657373000000000000006044820152606401620002a6565b6003546040516001600160a01b038084169216907fb3fd0123f0059326c0d3771de6b52f7cc07866caff01a05b16473ae87d382bf990600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166000908152600460205260408120546001106200042d5760405162461bcd60e51b815260206004820152601360248201527f746f6b656e2d6e6f742d737570706f72746564000000000000000000000000006044820152606401620002a6565b3386868686866040516200044190620010b1565b6001600160a01b039687168152948616602086015260408501939093529084166060840152909216608082015260a081019190915260c001604051809103906000f08015801562000496573d6000803e3d6000fd5b506001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b038481169182179092556000908152600260205260409020805460ff19169092179091559091508616620005063390565b6001600160a01b0316826001600160a01b03167fb09edfcf805674d896a73bdea048a368e58a9ee54fe3e177237ba603ce757223600180805490506200054d919062001540565b60408051918252602082018b90520160405180910390a495945050505050565b6000546001600160a01b03163314620005c95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620002a6565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6001600160a01b03811660009081526002602052604090205460ff165b919050565b60015460009082106200068b5760405162461bcd60e51b815260206004820152601960248201527f696e6465782d657863656564732d6c6973742d6c656e677468000000000000006044820152606401620002a6565b60018281548110620006ad57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b6001600160a01b03821660009081526004602090815260408083208151815460609481028201850184529281018381528594919384928491908401828280156200073c57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116200071d575b50505050508152602001600182015481525050905080600001516000815181106200077757634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620007b857600080fd5b505afa158015620007cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007f391906200135e565b620008009060126200155a565b6200080d90600a62001455565b620008199084620013e7565b92506000600182600001515162000831919062001540565b905060005b818110156200099957600354835180516000926001600160a01b0316916365fc145791859081106200087857634e487b7160e01b600052603260045260246000fd5b60200260200101518660000151856001620008949190620013cc565b81518110620008b357634e487b7160e01b600052603260045260246000fd5b602002602001015185600014620008cb5788620008cd565b895b60208901516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b0394851660048201529390921660248401526044830152610e106064830152608482015260a401604080518083038186803b1580156200094457600080fd5b505afa15801562000959573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200097f91906200133a565b50945081905062000990816200159a565b91505062000836565b50505092915050565b6000546001600160a01b03163314620009fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620002a6565b604080518082019091526060815260006020820152815160018111801562000a27575060058111155b62000a755760405162461bcd60e51b815260206004820152601360248201527f696e76616c69642d706174682d6c656e677468000000000000000000000000006044820152606401620002a6565b8062000a818162001580565b91505060005b8181101562000bcd5760035484516001600160a01b0390911690633cc3cb4c9086908490811062000ac857634e487b7160e01b600052603260045260246000fd5b60200260200101518684600162000ae09190620013cc565b8151811062000aff57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03928316600482015291166024820152610e10604482015260ff88166064820152608401602060405180830381600087803b15801562000b7c57600080fd5b505af115801562000b91573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bb7919062001173565b508062000bc4816200159a565b91505062000a87565b5082825260ff84166020808401919091526001600160a01b0386166000908152600482526040902083518051859362000c0b928492910190620010bf565b50602091909101516001909101556040516001600160a01b038616907f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a490600090a25050505050565b6001600160a01b038116600090815260046020908152604080832081518154606094810282018501845292810183815290939192849284919084018282801562000cc857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000ca9575b5050505050815260200160018201548152505090506000600182600001515162000cf3919062001540565b905060008167ffffffffffffffff81111562000d1f57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801562000d49578160200160208202803683370190505b50905060005b8281101562000ed357600354845180516001600160a01b03909216916344a6ee5b91908490811062000d9157634e487b7160e01b600052603260045260246000fd5b6020026020010151866000015184600162000dad9190620013cc565b8151811062000dcc57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151908801516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b039384166004820152929091166024830152610e106044830152606482015260840160206040518083038186803b15801562000e4a57600080fd5b505afa15801562000e5f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e85919062001173565b82828151811062000ea657634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101528062000eca816200159a565b91505062000d4f565b506003546040517f9dbc26860000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690639dbc26869062000f1f9084906004016200137d565b6040805180830381600087803b15801562000f3957600080fd5b505af115801562000f4e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f7491906200133a565b505050505050565b6000546001600160a01b0316331462000fd85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620002a6565b6001600160a01b038116620010565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401620002a6565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b611e1f806200160e83390190565b82805482825590600052602060002090810192821562001117579160200282015b828111156200111757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620010e0565b506200112592915062001129565b5090565b5b808211156200112557600081556001016200112a565b80356200063081620015e4565b6000602082840312156200115f578081fd5b81356200116c81620015e4565b9392505050565b60006020828403121562001185578081fd5b81516200116c81620015e4565b60008060408385031215620011a5578081fd5b8235620011b281620015e4565b946020939093013593505050565b600080600080600060a08688031215620011d8578081fd5b8535620011e581620015e4565b9450602086013593506040860135620011fe81620015e4565b925060608601356200121081620015e4565b949793965091946080013592915050565b60008060006060848603121562001236578283fd5b83356200124381620015e4565b92506020848101356200125681620015fd565b9250604085013567ffffffffffffffff8082111562001273578384fd5b818701915087601f83011262001287578384fd5b8135818111156200129c576200129c620015ce565b8060051b604051601f19603f83011681018181108582111715620012c457620012c4620015ce565b604052828152858101935084860182860187018c1015620012e3578788fd5b8795505b838610156200131057620012fb8162001140565b855260019590950194938601938601620012e7565b508096505050505050509250925092565b60006020828403121562001333578081fd5b5035919050565b600080604083850312156200134d578182fd5b505080516020909101519092909150565b60006020828403121562001370578081fd5b81516200116c81620015fd565b6020808252825182820181905260009190848201906040850190845b81811015620013c05783516001600160a01b03168352928401929184019160010162001399565b50909695505050505050565b60008219821115620013e257620013e2620015b8565b500190565b6000826200140357634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116200141c57506200144c565b818704821115620014315762001431620015b8565b808616156200143f57918102915b9490941c9380026200140b565b94509492505050565b60006200116c60001960ff85168460008262001474575060016200116c565b8162001483575060006200116c565b81600181146200149c5760028114620014a757620014db565b60019150506200116c565b60ff841115620014bb57620014bb620015b8565b6001841b915084821115620014d457620014d4620015b8565b506200116c565b5060208310610133831016604e8410600b841016171562001513575081810a838111156200150d576200150d620015b8565b6200116c565b62001522848484600162001408565b808604821115620015375762001537620015b8565b02949350505050565b600082821015620015555762001555620015b8565b500390565b600060ff821660ff841680821015620015775762001577620015b8565b90039392505050565b600081620015925762001592620015b8565b506000190190565b6000600019821415620015b157620015b1620015b8565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620015fa57600080fd5b50565b60ff81168114620015fa57600080fdfe60a06040523480156200001157600080fd5b5060405162001e1f38038062001e1f8339810160408190526200003491620003fd565b3360601b6001600160601b0319166080524281116200008d5760405162461bcd60e51b815260206004820152601060248201526f696e76616c69642d656e642d74696d6560801b60448201526064015b60405180910390fd5b816001600160a01b0316856001600160a01b03161415620000f15760405162461bcd60e51b815260206004820152601860248201527f70617965652d69732d66756e64696e672d616464726573730000000000000000604482015260640162000084565b6001600160a01b038516158015906200011257506001600160a01b03821615155b620001605760405162461bcd60e51b815260206004820152601d60248201527f70617965652d6f722d66756e64696e672d616464726573732d69732d30000000604482015260640162000084565b60008411620001a45760405162461bcd60e51b815260206004820152600f60248201526e07573642d616d6f756e742d69732d3608c1b604482015260640162000084565b600280546001600160a01b038088166001600160a01b0319928316179092556005869055600380548684169083161790556004805485841690831617905560018054928916929091169190911790554260068190556200020590826200048c565b60078190556200021690856200046b565b6008556040516430b236b4b760d91b602082015262000255906025016040516020818303038152906040528051906020012087620002d160201b60201c565b604051677061757361626c6560c01b6020820152620002c59060280160405160208183030381529060405280519060200120604051602001620002a3906430b236b4b760d91b815260050190565b60405160208183030381529060405280519060200120620002e160201b60201c565b505050505050620004b0565b620002dd82826200032d565b5050565b80620002ed83620003cd565b60405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526020829052604090912060010155565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620002dd576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003893390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152602081905260409020600101545b919050565b80516001600160a01b0381168114620003e057600080fd5b60008060008060008060c0878903121562000416578182fd5b6200042187620003e5565b95506200043160208801620003e5565b9450604087015193506200044860608801620003e5565b92506200045860808801620003e5565b915060a087015190509295509295509295565b6000826200048757634e487b7160e01b81526012600452602481fd5b500490565b600082821015620004ab57634e487b7160e01b81526011600452602481fd5b500390565b60805160601c61193b620004e46000396000818161035601528181610c7901528181610d610152610e1b015261193b6000f3fe608060405234801561001057600080fd5b50600436106101c35760003560e01c806398416f0e116100f9578063d547741f11610097578063f0d9093711610071578063f0d90937146103b0578063f3ca5edf146103b9578063f6d6d5aa146103cc578063fc0c546a146103d4576101c3565b8063d547741f1461038b578063d9d1bc271461039e578063e834a834146103a7576101c3565b8063af38d757116100d3578063af38d75714610341578063b87fe77414610349578063c45a015514610351578063d3b7bfb414610378576101c3565b806398416f0e14610313578063a217fddf14610326578063ae90b2131461032e576101c3565b806336568abe116101665780635c975abb116101405780635c975abb146102b357806361cd014d146102c057806378e97925146102d357806391d14854146102dc576101c3565b806336568abe146102905780634b7c6617146102a35780634e71d92d146102ab576101c3565b8063123119cd116101a2578063123119cd1461021857806319f7671b14610243578063248a9ca31461025a5780632f2ff15d1461027d576101c3565b80627adac4146101c857806301ffc9a7146101dd57806303b86b5514610205575b600080fd5b6101db6101d6366004611690565b6103e7565b005b6101f06101eb36600461170d565b61047c565b60405190151581526020015b60405180910390f35b6101db61021336600461174d565b6104e7565b60015461022b906001600160a01b031681565b6040516001600160a01b0390911681526020016101fc565b61024c60075481565b6040519081526020016101fc565b61024c6102683660046116ca565b60009081526020819052604090206001015490565b6101db61028b3660046116e2565b6105fe565b6101db61029e3660046116e2565b61062a565b6101db6106b6565b6101db61078d565b600a546101f09060ff1681565b6101db6102ce366004611690565b61084d565b61024c60065481565b6101f06102ea3660046116e2565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6101db610321366004611690565b6109c0565b61024c600081565b60025461022b906001600160a01b031681565b61024c6109f7565b6101db610a07565b61022b7f000000000000000000000000000000000000000000000000000000000000000081565b60045461022b906001600160a01b031681565b6101db6103993660046116e2565b610ac8565b61024c60085481565b61024c60095481565b61024c60055481565b6101db6103c7366004611690565b610aee565b61024c610c69565b60035461022b906001600160a01b031681565b6001600160a01b0381166104425760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642d64656c65676174650000000000000000000000000000000060448201526064015b60405180910390fd5b604051677061757361626c6560c01b60208201526104799060280160405160208183030381529060405280519060200120826105fe565b50565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806104df57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b6001546001600160a01b0316336001600160a01b03161461053d5760405162461bcd60e51b815260206004820152601060248201526f3737ba16b9ba3932b0b696b7bbb732b960811b6044820152606401610439565b42811161058c5760405162461bcd60e51b815260206004820152601060248201527f696e76616c69642d656e642d74696d65000000000000000000000000000000006044820152606401610439565b610594610d26565b60058290554260068190556105a99082611895565b60078190556105b89083611856565b600855600060095560408051838152602081018390527f11f23cf1c7a2a194f2b700a80fe1987bf966eb2f8176a0ecf94eec6eb22f408f91015b60405180910390a15050565b60008281526020819052604090206001015461061b81335b610f58565b6106258383610fd6565b505050565b6001600160a01b03811633146106a85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610439565b6106b28282611074565b5050565b6001546001600160a01b0316336001600160a01b0316148061070c5750604051677061757361626c6560c01b602082015261070c906028015b604051602081830303815290604052805190602001206102ea3390565b6107585760405162461bcd60e51b815260206004820152601d60248201527f6e6f742d73747265616d2d6f776e65722d6f722d64656c6567617465640000006044820152606401610439565b600a805460ff191690556040517f27196296b54785165ca5e02d8431ca24e4910ce25b0add3fce74aa38927b34a390600090a1565b6002546001600160a01b0316336001600160a01b0316146107f05760405162461bcd60e51b815260206004820152600960248201527f6e6f742d706179656500000000000000000000000000000000000000000000006044820152606401610439565b600a5460ff16156108435760405162461bcd60e51b815260206004820152601060248201527f73747265616d2d69732d706175736564000000000000000000000000000000006044820152606401610439565b61084b610d26565b565b6001546001600160a01b0316336001600160a01b0316146108a35760405162461bcd60e51b815260206004820152601060248201526f3737ba16b9ba3932b0b696b7bbb732b960811b6044820152606401610439565b6001600160a01b0381166108f95760405162461bcd60e51b815260206004820152601b60248201527f696e76616c69642d6e65772d66756e64696e672d6164647265737300000000006044820152606401610439565b6004546001600160a01b03828116911614156109575760405162461bcd60e51b815260206004820152601860248201527f73616d652d6e65772d66756e64696e672d6164647265737300000000000000006044820152606401610439565b6004546040516001600160a01b038084169216907f45c1138f56e2e3f78c7e80b5c395a6510bbaba05d80c4d66e947c301c9d388f090600090a36004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b604051677061757361626c6560c01b6020820152610479906028016040516020818303038152906040528051906020012082610ac8565b6000610a016110f3565b90505b90565b6001546001600160a01b0316336001600160a01b03161480610a445750604051677061757361626c6560c01b6020820152610a44906028016106ef565b610a905760405162461bcd60e51b815260206004820152601d60248201527f6e6f742d73747265616d2d6f776e65722d6f722d64656c6567617465640000006044820152606401610439565b600a805460ff191660011790556040517f8b7fc2110b35688b78e16841494350c1b3329185624cea4b50e59fc2e544a7f890600090a1565b600082815260208190526040902060010154610ae48133610616565b6106258383611074565b6001546001600160a01b0316336001600160a01b031614610b445760405162461bcd60e51b815260206004820152601060248201526f3737ba16b9ba3932b0b696b7bbb732b960811b6044820152606401610439565b6001600160a01b038116610b9a5760405162461bcd60e51b815260206004820152601160248201527f696e76616c69642d6e65772d70617965650000000000000000000000000000006044820152606401610439565b6002546001600160a01b0382811691161415610bf85760405162461bcd60e51b815260206004820152600e60248201527f73616d652d6e65772d70617965650000000000000000000000000000000000006044820152606401610439565b610c00610d26565b6002546040516001600160a01b038084169216907fa9e5978bbfbf156599d86b750e4db433bc414c83e3ee93cae447582d6d42990b90600090a36002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163b2211d5c9116610caa6110f3565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610cee57600080fd5b505afa158015610d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a019190611735565b6003546040517ff08ad9d80000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201527f00000000000000000000000000000000000000000000000000000000000000009091169063f08ad9d890602401600060405180830381600087803b158015610da757600080fd5b505af1158015610dbb573d6000803e3d6000fd5b505050506000610dc96110f3565b905080610dd6575061084b565b6003546040517fb2211d5c0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018390526000917f0000000000000000000000000000000000000000000000000000000000000000169063b2211d5c9060440160206040518083038186803b158015610e5d57600080fd5b505afa158015610e71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e959190611735565b905060008111610ee75760405162461bcd60e51b815260206004820152601360248201527f6f7261636c652d7570646174652d6572726f72000000000000000000000000006044820152606401610439565b8160096000828254610ef9919061183e565b9091555050600454600254600354610f22926001600160a01b0391821692908216911684611149565b60408051838152602081018390527fc83b5086ce94ec8d5a88a9f5fea4b18a522bb238ed0d2d8abd959549a80c16b891016105f2565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166106b257610f94816001600160a01b031660146111d7565b610f9f8360206111d7565b604051602001610fb092919061178a565b60408051601f198184030181529082905262461bcd60e51b82526104399160040161180b565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166106b2576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556110303390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156106b2576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080600654426111049190611895565b9050600754811115611128576009546005546111209190611895565b915050610a04565b600954816008546111399190611876565b6111439190611895565b91505090565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526111d1908590611405565b50505050565b606060006111e6836002611876565b6111f190600261183e565b67ffffffffffffffff81111561121757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611241576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061128657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106112df57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611303846002611876565b61130e90600161183e565b90505b60018111156113af577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061135d57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061138157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936113a8816118d8565b9050611311565b5083156113fe5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610439565b9392505050565b600061145a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114ea9092919063ffffffff16565b805190915015610625578080602001905181019061147891906116aa565b6106255760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610439565b60606114f98484600085611501565b949350505050565b6060824710156115795760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610439565b843b6115c75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610439565b600080866001600160a01b031685876040516115e3919061176e565b60006040518083038185875af1925050503d8060008114611620576040519150601f19603f3d011682016040523d82523d6000602084013e611625565b606091505b5091509150611635828286611640565b979650505050505050565b6060831561164f5750816113fe565b82511561165f5782518084602001fd5b8160405162461bcd60e51b8152600401610439919061180b565b80356001600160a01b03811681146104e257600080fd5b6000602082840312156116a1578081fd5b6113fe82611679565b6000602082840312156116bb578081fd5b815180151581146113fe578182fd5b6000602082840312156116db578081fd5b5035919050565b600080604083850312156116f4578081fd5b8235915061170460208401611679565b90509250929050565b60006020828403121561171e578081fd5b81356001600160e01b0319811681146113fe578182fd5b600060208284031215611746578081fd5b5051919050565b6000806040838503121561175f578182fd5b50508035926020909101359150565b600082516117808184602087016118ac565b9190910192915050565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000825283516117c28160178501602088016118ac565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516117ff8160288401602088016118ac565b01602801949350505050565b600060208252825180602084015261182a8160408501602087016118ac565b601f01601f19169190910160400192915050565b60008219821115611851576118516118ef565b500190565b60008261187157634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611890576118906118ef565b500290565b6000828210156118a7576118a76118ef565b500390565b60005b838110156118c75781810151838201526020016118af565b838111156111d15750506000910152565b6000816118e7576118e76118ef565b506000190190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212207f49f249c74eaf5f13b8d727d4a6d639a345c9da3a6d98c2c3e4dde393ed509d64736f6c63430008030033a26469706673582212209f47d50977e44ed87df9c502cd1f39dcba50ff1abe7e580a0c995fa9cc0a4d1164736f6c63430008030033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addToken(address,uint8,address[])": {
        "params": {
          "_dex": "ID for choosing the DEX where prices will be retrieved (0 = Uniswap v2, 1 = Sushiswap)",
          "_path": "path of tokens to reach a _tokenAddress from a USD stablecoin (e.g: [ USDC, WETH, VSP ])",
          "_tokenAddress": "address of the ERC20 token to add support to"
        }
      },
      "createStream(address,uint256,address,address,uint256)": {
        "details": "Payer (_msgSender()) is set as admin of \"pausableRole\", so he can grant and revoke the \"pausable\" role later on",
        "params": {
          "_endTime": "timestamp that sets drip distribution end",
          "_fundingAddress": "address used to withdraw the drip",
          "_payee": "address that receives the payment stream",
          "_token": "address of the ERC20 token that payee receives as payment",
          "_usdAmount": "uint256 total amount in USD (scaled to 18 decimals) to be distributed until endTime"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateOracles(address)": {
        "params": {
          "_token": "address of target token"
        }
      },
      "updateSwapManager(address)": {
        "details": "Only contract owner can change swapManager",
        "params": {
          "_newAddress": "address of new Swap Manager instance"
        }
      },
      "usdToTokenAmount(address,uint256)": {
        "params": {
          "_amount": "amount in USD (scaled to 18 decimals)",
          "_token": "address of target token"
        },
        "returns": {
          "lastPrice": "target token amount"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addToken(address,uint8,address[])": {
        "notice": "If caller is contract owner it adds (or updates) Oracle price feed for given token"
      },
      "createStream(address,uint256,address,address,uint256)": {
        "notice": "Creates a new payment stream"
      },
      "getStream(uint256)": {
        "notice": "Returns address of the stream located at given id"
      },
      "getStreamsCount()": {
        "notice": "Returns no. of streams stored in contract"
      },
      "ours(address)": {
        "notice": "Checks if a address belongs to this contract' streams"
      },
      "updateOracles(address)": {
        "notice": "Updates price oracles for a given token"
      },
      "updateSwapManager(address)": {
        "notice": "Updates Swap Manager contract address"
      },
      "usdToTokenAmount(address,uint256)": {
        "notice": "Converts given amount in usd to target token amount using oracle"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 375,
        "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2829,
        "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
        "label": "allStreams",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2833,
        "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
        "label": "isOurs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2842,
        "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
        "label": "swapManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISwapManager)3699"
      },
      {
        "astId": 2847,
        "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
        "label": "supportedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(TokenSupport)3352_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISwapManager)3699": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(TokenSupport)3352_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPaymentStreamFactory.TokenSupport)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenSupport)3352_storage"
      },
      "t_struct(TokenSupport)3352_storage": {
        "encoding": "inplace",
        "label": "struct IPaymentStreamFactory.TokenSupport",
        "members": [
          {
            "astId": 3349,
            "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
            "label": "path",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 3351,
            "contract": "contracts/PaymentStreamFactory.sol:PaymentStreamFactory",
            "label": "dex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}